{"version":3,"sources":["types/EPageStatus.ts","context/AppContext.ts","components/Header.tsx","containers/Page404.tsx","components/Select.tsx","components/Filter.tsx","components/Input.tsx","components/Loader.tsx","components/SelectOption.tsx","services/base-service.ts","configuration.ts","containers/todos/TodoList.tsx","components/Button.tsx","containers/todos/TodosAdd.tsx","containers/todos/TodosEdit.tsx","containers/todos/TodosIndex.tsx","containers/home/HomeIndex.tsx","services/account-service.ts","containers/identity/LoginForm.tsx","containers/identity/RegisterForm.tsx","containers/categories/CategoryAdd.tsx","containers/categories/CategoryCards.tsx","containers/categories/CategoryEdit.tsx","containers/categories/CategoriesIndex.tsx","containers/priorities/PriorityAdd.tsx","containers/priorities/PriorityCards.tsx","containers/priorities/PriorityEdit.tsx","containers/priorities/PrioritiesIndex.tsx","App.tsx","index.tsx"],"names":["EPageStatus","initialAppState","jwt","firstName","lastName","setAuthInfo","loading","AppContext","React","createContext","AppContextProvider","Provider","Consumer","Header","changeTheme","theme","html","document","querySelector","classList","contains","remove","updateButtonValue","add","isDarkTheme","useState","buttonValue","appState","useContext","className","to","title","onClick","Page404","SelectList","props","htmlFor","labelValue","id","value","onChange","e","handleChange","target","classNames","options","Filter","type","Select","Input","Loader","pageStatus","Loading","Error","hideErrors","statusCode","messages","map","message","SelectOption","displayName","key","BaseService","headers","Authorization","_axios","Axios","create","baseURL","getAll","apiEndpoint","a","get","getAxiosConfiguration","response","ok","status","data","axError","post","entity","JSON","stringify","put","delete","TodoList","toDateString","date","separator","getDate","getMonth","getFullYear","values","sort","b","isCompleted","Date","dueDt","todo","selectedTodo","setSelectedTodo","initialSelectedTodo","taskName","createdDt","checked","setTodoCompletedValue","Button","action","preventDefault","TodosAdd","selected","handleDateChange","dateFormat","minDate","now","categories","length","category","categoryName","todoCategoryId","generateDefaultCategories","priorities","priority","priorityName","todoPriorityId","generateDefaultPriorities","addTodo","TodosEdit","editTodo","isArchived","deleteTodo","archiveTodo","initialFormValues","taskSort","initialTodoFilters","categoryFilters","priorityFilters","hideDone","searchValue","filters","TodosIndex","formValues","setFormValues","todos","setTodos","setPageStatus","setCategories","setPriorities","dueDate","setDueDate","archivedTodos","setArchivedTodos","currentFilters","setCurrentFilters","filteredTodos","setfilteredTodos","loadData","result","filterResult","filter","filterArchived","categoryResult","priorityResult","Ok","filterTodos","lowPriority","prioritySort","normalPriority","highPriority","lowResult","normResult","highResult","homeCategory","categorySort","workCategory","homeResult","workResult","archivedTodo","splice","findIndex","push","filteredValues","undefined","console","log","toLowerCase","includes","panelIsVisible","panelQuerySelector","panel","setPanelVisible","visible","openerQuerySelector","openableQuerySelector","accordion","innerHTML","useEffect","Array","HomeIndex","AccountService","axios","login","loginData","register","registerData","email","password","FormView","autoComplete","toggleAuthStatus","LoginForm","jwtResponse","token","RegisterForm","CategoryAdd","addCategory","CategoryCards","CategoryCard","selectedCategory","selectCategory","initialSelectedCategory","removeCategory","CategoryEdit","handleEditChange","editCategory","CategoriesIndex","setSelectedCategory","Number","parseInt","PriorityAdd","addPriority","PriorityCards","PriorityCard","selectedPriority","selectPriority","initialSelectedPriority","removePriority","PriorityEdit","editPriority","PrioritiesIndex","setSelectedPriority","App","setAppState","exact","path","component","ReactDOM","render","basename","process","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b43e4422.chunk.js","sourcesContent":["export enum EPageStatus {\r\n    Loading = \"Loading...\",\r\n    Error = \"Error...\",\r\n    Ok = \"Ok\",\r\n}\r\n","import React from 'react';\r\n\r\nexport interface IAppState {\r\n    jwt: string | null;\r\n    firstName: string;\r\n    lastName: string;\r\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string) => void,\r\n    loading: boolean;\r\n};\r\n\r\nexport const initialAppState: IAppState = {\r\n    jwt: null,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    setAuthInfo: (): void => { },\r\n    loading: false,\r\n};\r\n\r\nexport const AppContext = React.createContext<IAppState>(initialAppState);\r\nexport const AppContextProvider = AppContext.Provider;\r\nexport const AppContextConsumer = AppContext.Consumer;\r\n","import React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Header = () => {\r\n    //#region Theme\r\n    const changeTheme = (theme: 'dark' | '') => {\r\n        let html = document.querySelector('html');\r\n        if (theme === 'dark' && !html?.classList.contains('dark')) {\r\n            updateButtonValue('☀');\r\n            html?.classList.add(theme);\r\n        } else {\r\n            html?.classList.remove('dark');\r\n            updateButtonValue('🌑')\r\n        }\r\n    }\r\n\r\n    const isDarkTheme = (): boolean => {\r\n        let html = document.querySelector('html');\r\n        if (html?.classList.contains('dark')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    const [buttonValue, updateButtonValue] = useState(isDarkTheme() ? '☀' : '🌑');\r\n\r\n    //#endregion\r\n\r\n    //#region AppState\r\n\r\n    let appState = useContext(AppContext)\r\n\r\n    const logOut = (): void => {\r\n        appState.setAuthInfo(null, '', '');\r\n    }\r\n\r\n    //#endregion\r\n\r\n    return (\r\n        <header className=\"flex p-2 bg-blue-700 dark:bg-gray-800 justify-between\">\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    <li className=\"flex-auto\">\r\n                        <Link className=\"block px-2 text-white \" to=\"/\" title=\"Home\">\r\n                            <span className=\"text-2xl animal\"></span>\r\n                        </Link>\r\n                    </li>\r\n                    {\r\n                        appState.jwt === null\r\n                            ?\r\n                            <></>\r\n                            :\r\n                            <>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/todos\">\r\n                                        Todo list\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/categories\">\r\n                                        Categories\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/priorities\">\r\n                                        Priorities\r\n                                    </NavLink>\r\n                                </li>\r\n                            </>\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    {appState.jwt === null\r\n                        ?\r\n                        <>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\" to=\"/identity/login\">\r\n                                    Login\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\" to=\"/identity/register\">\r\n                                    Register\r\n                                </NavLink>\r\n                            </li>\r\n                        </>\r\n                        :\r\n                        <li>\r\n                            <button\r\n                                onClick={() => logOut()}\r\n                                className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\">\r\n                                Log Out\r\n                            </button>\r\n                        </li>\r\n                    }\r\n                </ul>\r\n                {\r\n                    isDarkTheme()\r\n                        ?\r\n                        <button className=\"text-white\" onClick={() => changeTheme('')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                        :\r\n                        <button onClick={() => changeTheme('dark')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                }\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Page404 = () => {\r\n    const appState = useContext(AppContext);\r\n    return (\r\n        <div className=\"flex flex-row justify-center text-white\">\r\n            <div className=\"flex flex-col space-y-20\">\r\n                <div>Sadly, this page does not exist.</div>\r\n                <div className=\"flex flex-row justify-evenly font-semibold\">\r\n                    <Link to=\"/\">Home</Link>|\r\n                    {\r\n                        appState.jwt === null\r\n                            ?\r\n                            <>\r\n                                <Link to=\"/identity/login\">Login</Link>|\r\n                                <Link to=\"/identity/register\">Register</Link>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <Link to=\"/todos\">Todo list</Link>|\r\n                                <Link to=\"/categories\">Categories</Link>|\r\n                                <Link to=\"/priorities\">Priorities</Link>\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;\r\n","interface ISelectListProps {\r\n    options: JSX.Element[];\r\n    handleChange: (target: HTMLSelectElement) => void;\r\n    id: string;\r\n    value: string;\r\n    classNames?: string;\r\n    labelValue: string;\r\n}\r\n\r\nconst SelectList = (props: ISelectListProps) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"todoCategoryId\" className=\"text-white font-semibold\">{props.labelValue}</label>\r\n            <select id={props.id}\r\n                value={props.value}\r\n                onChange={(e) => props.handleChange(e.target)}\r\n                className={\"p-1 \" + props.classNames}\r\n            >\r\n                <option key=\"\" value=\"-1\"></option>\r\n                {props.options}\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SelectList;","import SelectList from \"./Select\";\r\n\r\ninterface IFilterProps {\r\n    handleChange: (target: HTMLSelectElement | HTMLInputElement) => void;\r\n    id: string;\r\n    labelValue: string;\r\n    options?: JSX.Element[];\r\n    value: string | boolean;\r\n    type: \"selectList\" | \"boolean\"\r\n    checked?: boolean;\r\n}\r\n\r\nconst Filter = (props: IFilterProps) => {\r\n    if (props.type === \"selectList\") {\r\n        return (\r\n            <div className=\"flex flex-col w-1/3\">\r\n                <SelectList\r\n                    handleChange={(e) => props.handleChange(e)}\r\n                    id={props.id}\r\n                    labelValue={props.labelValue}\r\n                    options={props.options as JSX.Element[]}\r\n                    value={props.value as string}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return <></>\r\n    }\r\n\r\n}\r\n\r\nexport default Filter;","interface IInputProps {\r\n    type: string;\r\n    classNames?: string;\r\n    value: string | number;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    labelValue: string;\r\n    id: string;\r\n    autoComplete?: string;\r\n}\r\n\r\nconst Input = (props: IInputProps) => {\r\n    return (\r\n        <div className=\"flex flex-col font-semibold\">\r\n            <label className=\"text-white\" htmlFor={props.id}>\r\n                {props.labelValue}\r\n            </label>\r\n            <input id={props.id}\r\n                type={props.type}\r\n                className={\"p-1 bg-white text-black \" + props.classNames}\r\n                value={props.value}\r\n                onChange={(e) => props.handleChange(e.target)}\r\n            >\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import { EPageStatus } from \"../types/EPageStatus\";\r\nimport { IPageStatus } from \"../types/IPageStatus\";\r\n\r\nconst Loader = (props: { pageStatus: IPageStatus }) => {\r\n\r\n    const hideErrors = (e: EventInit) => {\r\n        document.querySelector('#error')?.classList.add('hidden');\r\n    }\r\n\r\n    switch (props.pageStatus.pageStatus) {\r\n        case EPageStatus.Loading:\r\n            return (\r\n                <div className=\"absolute top-0 right-0 bottom-0 left-0 w-full h-full bg-gray-600 grid opacity-60 justify-center content-center \">\r\n                    <div className=\"lds-ring\"><div className=\"dark:boder-white\"></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            )\r\n        case EPageStatus.Error:\r\n            return (\r\n                <div id=\"error\" onClick={(e) => hideErrors(e)} className=\"absolute top-0 bg-red-300 p-4 rounded-br-md\">\r\n                    Error {props.pageStatus.statusCode}\r\n                    <br></br>\r\n                    <ul>\r\n                        {props.pageStatus.messages?.map(message => {\r\n                            return <li>{message}</li>\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>)\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n","interface ISelectOptionProps {\r\n    key: string;\r\n    value: string;\r\n    displayName: string;\r\n}\r\nconst SelectOption = (props: ISelectOptionProps) => {\r\n    return (\r\n        <option key={props.key} value={props.value}>{props.displayName}</option>\r\n    )\r\n}\r\n\r\nexport default SelectOption;","import { ApiBaseUrl } from './../configuration';\r\nimport Axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { IFetchResponse } from '../types/IFetchResponse';\r\n\r\nexport abstract class BaseService {\r\n    protected static _axios = Axios.create({\r\n        baseURL: ApiBaseUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\r\n        if (!jwt) return undefined;\r\n        const config: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: 'Bearer ' + jwt\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    static getAll = async <TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await BaseService._axios\r\n                .get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity[]\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static get = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.get<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static post = async <TEntity>(apiEndpoint: string, entity: TEntity, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.post<TEntity>(apiEndpoint, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static put = async <TEntity>(apiEndpoint: string, entity: TEntity, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.put<TEntity>(`${apiEndpoint}/${id}`, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static delete = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.delete<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const ApiBaseUrl = \"https://taltech.akaver.com/api/v1/\";\r\nexport const LoginUrl = \"https://taltech.akaver.com/api/v1/Account/\";","import { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { initialSelectedTodo } from \"./TodosIndex\";\r\n\r\nexport interface ITodosListProps {\r\n    values: ITodoTask[];\r\n    setSelectedTodo: (todo: ITodoTask) => void;\r\n    selectedTodo: ITodoTask;\r\n    setTodoCompletedValue: (todo: ITodoTask) => void;\r\n}\r\n\r\nconst TodoList = (props: ITodosListProps) => {\r\n    const toDateString = (date: Date, separator: string = \".\"): string => {\r\n        return `${date.getDate() > 9 ? date.getDate() : \"0\" + date.getDate()}${separator}${(date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : \"0\" + (date.getMonth() + 1)}${separator}${date.getFullYear()}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <div className=\"flex flex-col sm:w-120 w-96 cursor-default\">\r\n\r\n                <div className=\"flex flex-row justify-between font-semibold text-white\">\r\n                    <div className=\"sm:w-2/4 w-2/3\">Task</div>\r\n                    <div className=\"sm:w-1/4 sm:block hidden\">Added</div>\r\n                    <div className=\"sm:w-1/4 w-1/3\">Due date</div>\r\n                    <div className=\"w-4\"></div>\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                    {props.values\r\n                        .sort((a, b) => {\r\n                            if (a.isCompleted === b.isCompleted) {\r\n                                return (\r\n                                    new Date(a.dueDt ?? \"\") < new Date(b.dueDt ?? \"\") ? -1 : 1\r\n                                )\r\n                            } else if (a.isCompleted) {\r\n                                return 1\r\n                            } else {\r\n                                return -1\r\n                            }\r\n                        })\r\n                        .map(todo => {\r\n                            if (todo.id === props.selectedTodo.id) {\r\n                                return (\r\n                                    <div className=\"flex flex-row justify-between p-1 border rounded-md border-yellow-100 bg-yellow-200 text-black cursor-pointer\">\r\n                                        <div\r\n                                            onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                            className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                            <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                            <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                            <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                        </div>\r\n                                        <div><input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input></div>\r\n                                    </div>\r\n                                )\r\n                            } else {\r\n                                if (!todo.isCompleted) {\r\n                                    return (\r\n                                        <div className=\"flex flex-row justify-between p-1 border rounded-md border-white hover:bg-yellow-200 hover:text-black text-white cursor-pointer\">\r\n                                            <div\r\n                                                onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                                className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                                <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                                <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                                <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <div className=\"flex flex-row justify-between p-1 border rounded-md border-white hover:bg-yellow-200 hover:text-black text-white opacity-30 cursor-pointer\">\r\n                                            <div\r\n                                                onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                                className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                                <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                                <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                                <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            }\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","interface IButttonProps {\r\n    classNames?: string;\r\n    action: (target: EventTarget) => void;\r\n    value: string;\r\n    id?: string;\r\n}\r\n\r\nconst Button = (props: IButttonProps) => {\r\n    return (\r\n        <div className=\"flex flex-row w-full\">\r\n            <button\r\n                className={\"p-2 font-bold text-center \" + props.classNames}\r\n                onClick={(e) => { props.action(e.target); e.preventDefault(); }}>\r\n                {props.value}\r\n            </button>\r\n        </div>)\r\n}\r\n\r\nexport default Button;","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from \"../../components/Input\";\r\nimport React from \"react\";\r\nimport SelectList from \"../../components/Select\";\r\nimport Button from \"../../components/Button\";\r\nimport SelectOption from \"../../components/SelectOption\";\r\n\r\n\r\nexport interface ITodoAddProps {\r\n    values: ITodoTask;\r\n    handleChange: (target: HTMLInputElement | HTMLSelectElement) => void;\r\n    handleDateChange: (target: Date) => void;\r\n    addTodo: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n    categories: ITodoCategory[];\r\n    priorities: ITodoPriority[];\r\n    date: Date;\r\n    generateDefaultPriorities: () => void;\r\n    generateDefaultCategories: () => void;\r\n}\r\n\r\nconst TodosAdd = (props: ITodoAddProps) => {\r\n\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <form className=\"p-2 w-96 sm:w-120 text-black\">\r\n                <div className=\"flex w-full flex-col space-y-4\">\r\n                    <div className=\"flex flex-col space-y-4\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            classNames=\"p-1 bg-white\"\r\n                            value={props.values.taskName}\r\n                            handleChange={props.handleChange}\r\n                            labelValue=\"What do you need to do?\"\r\n                            id=\"taskName\"\r\n                        />\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">When does it have to be done?</label>\r\n                            <DatePicker\r\n                                className=\"w-full\"\r\n                                selected={new Date(props.date)}\r\n                                onChange={(date) => props.handleDateChange(date as Date)}\r\n                                dateFormat=\"dd.MM.yyyy\"\r\n                                minDate={new Date(Date.now())}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-between\">\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            {\r\n                                props.categories.length > 0\r\n                                    ?\r\n                                    <>\r\n                                        <SelectList\r\n                                            options={props.categories.map(category => {\r\n                                                return (\r\n                                                    <SelectOption\r\n                                                        value={category.id ?? \"\"}\r\n                                                        key={category.id ?? \"\"}\r\n                                                        displayName={category.categoryName}\r\n                                                    />\r\n                                                )\r\n                                            })}\r\n                                            id=\"todoCategoryId\"\r\n                                            value={props.values.todoCategoryId}\r\n                                            handleChange={props.handleChange}\r\n                                            labelValue=\"Categorize!\"\r\n                                        />\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"p-2 bg-green-600 hover:text-pink-100 font-semibold text-white text-center\"\r\n                                            to=\"/categories\">\r\n                                            Add categories\r\n                                        </Link>\r\n                                        <span className=\"text-white\">or</span>\r\n                                        <Button\r\n                                            action={props.generateDefaultCategories}\r\n                                            classNames=\"hover:text-pink-100 text-white text-left bg-green-600 w-full\"\r\n                                            value=\"Generate default\"\r\n                                        />\r\n                                    </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            {\r\n                                props.priorities.length > 0\r\n                                    ?\r\n                                    <SelectList\r\n                                        options={props.priorities.map(priority => {\r\n                                            return (\r\n                                                <SelectOption\r\n                                                    value={priority.id ?? \"\"}\r\n                                                    key={priority.id ?? \"\"}\r\n                                                    displayName={priority.priorityName}\r\n                                                />\r\n                                            )\r\n                                        })}\r\n                                        id=\"todoPriorityId\"\r\n                                        value={props.values.todoPriorityId}\r\n                                        handleChange={props.handleChange}\r\n                                        labelValue=\"Prioritize!\"\r\n                                    />\r\n                                    :\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"p-2 bg-green-600 hover:text-pink-100 font-semibold text-white text-center\"\r\n                                            to=\"/priorities\">\r\n                                            Add priorities\r\n                                        </Link>\r\n                                        <span className=\"text-white\">or</span>\r\n                                        <Button\r\n                                            action={props.generateDefaultPriorities}\r\n                                            classNames=\"hover:text-pink-100 text-white text-left bg-green-600 w-full\"\r\n                                            value=\"Generate default\"\r\n                                        />\r\n                                    </>\r\n\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <Button\r\n                        action={props.addTodo}\r\n                        classNames=\"bg-green-600 w-full text-white\"\r\n                        value=\"Add\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodosAdd;","import React from \"react\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Input from \"../../components/Input\";\r\nimport SelectList from \"../../components/Select\";\r\nimport Button from \"../../components/Button\";\r\nimport SelectOption from \"../../components/SelectOption\";\r\n\r\nexport interface ITodosEditProps {\r\n    values: ITodoTask;\r\n    editTodo: (target: EventTarget) => void;\r\n    handleChange: (target: HTMLInputElement | HTMLSelectElement) => void;\r\n    handleDateChange: (target: Date) => void;\r\n    categories: ITodoCategory[];\r\n    priorities: ITodoPriority[];\r\n    archiveTodo: (target: EventTarget) => void;\r\n    deleteTodo: (target: EventTarget) => void;\r\n}\r\n\r\nconst TodosEdit = (props: ITodosEditProps) => {\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <form className=\"p-2 w-96 sm:w-120 text-black\">\r\n                <div className=\"flex w-full flex-col space-y-4\">\r\n                    <div className=\"flex flex-col space-y-4\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            classNames=\"p-1 bg-white\"\r\n                            value={props.values.taskName}\r\n                            handleChange={props.handleChange}\r\n                            labelValue=\"What do you need to do?\"\r\n                            id=\"taskNameEdit\"\r\n                        />\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">When does it have to be done?</label>\r\n                            <DatePicker\r\n                                className=\"w-full\"\r\n                                selected={new Date(props.values.dueDt)}\r\n                                onChange={(date) => props.handleDateChange(date as Date)}\r\n                                dateFormat=\"dd.MM.yyyy\"\r\n                                minDate={new Date(Date.now())}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-between\">\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <SelectList\r\n                                options={props.categories.map(category => {\r\n                                    return (\r\n                                        <SelectOption\r\n                                            value={category.id ?? \"\"}\r\n                                            key={category.id ?? \"\"}\r\n                                            displayName={category.categoryName}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                id=\"todoCategoryIdEdit\"\r\n                                value={props.values.todoCategoryId}\r\n                                handleChange={props.handleChange}\r\n                                labelValue=\"Categorize!\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <SelectList\r\n                                options={props.priorities.map(priority => {\r\n                                    return (\r\n                                        <SelectOption\r\n                                            value={priority.id ?? \"\"}\r\n                                            key={priority.id ?? \"\"}\r\n                                            displayName={priority.priorityName}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                id=\"todoPriorityIdEdit\"\r\n                                value={props.values.todoPriorityId}\r\n                                handleChange={props.handleChange}\r\n                                labelValue=\"Prioritize!\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row\">\r\n                        <Button\r\n                            action={props.editTodo}\r\n                            classNames=\"bg-yellow-200 text-black w-full\"\r\n                            value=\"Edit\"\r\n                        />\r\n                        {\r\n                            props.values.isArchived\r\n                                ?\r\n                                <Button\r\n                                    action={props.deleteTodo}\r\n                                    classNames=\"bg-red-300 text-black w-full\"\r\n                                    value=\"Delete permanently\"\r\n                                />\r\n                                :\r\n                                <Button\r\n                                    action={props.archiveTodo}\r\n                                    classNames=\"bg-red-200 text-black w-full\"\r\n                                    value=\"Archive\"\r\n                                />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodosEdit;","import { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport Button from \"../../components/Button\";\r\nimport Filter from \"../../components/Filter\";\r\nimport Input from \"../../components/Input\";\r\nimport Loader from \"../../components/Loader\";\r\nimport SelectOption from \"../../components/SelectOption\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodosAdd from \"./TodosAdd\";\r\nimport TodosEdit from \"./TodosEdit\";\r\n\r\nconst initialFormValues: ITodoTask = {\r\n    taskName: \"\",\r\n    taskSort: 0,\r\n    dueDt: new Date(Date.now()),\r\n    isCompleted: false,\r\n    isArchived: false,\r\n    todoCategoryId: \"\",\r\n    todoPriorityId: \"\",\r\n}\r\n\r\nexport const initialSelectedTodo: ITodoTask = {\r\n    id: \"\",\r\n    taskName: \"\",\r\n    taskSort: 0,\r\n    dueDt: new Date(Date.now()),\r\n    isCompleted: false,\r\n    isArchived: false,\r\n    todoCategoryId: \"\",\r\n    todoPriorityId: \"\",\r\n}\r\n\r\ninterface ITodoFilters {\r\n    categoryFilters: string;\r\n    priorityFilters: string;\r\n    hideDone: string;\r\n    searchValue: string;\r\n}\r\n\r\nconst initialTodoFilters: ITodoFilters = {\r\n    categoryFilters: \"\",\r\n    priorityFilters: \"\",\r\n    hideDone: \"\",\r\n    searchValue: \"\",\r\n\r\n}\r\nlet filters = {} as ITodoFilters;\r\n\r\nconst TodosIndex = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [todos, setTodos] = useState([] as ITodoTask[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [categories, setCategories] = useState([] as ITodoCategory[]);\r\n    const [priorities, setPriorities] = useState([] as ITodoPriority[]);\r\n    const [dueDate, setDueDate] = useState(new Date(Date.now()));\r\n    const [selectedTodo, setSelectedTodo] = useState(initialSelectedTodo)\r\n    const [archivedTodos, setArchivedTodos] = useState([] as ITodoTask[]);\r\n    const [currentFilters, setCurrentFilters] = useState(initialTodoFilters);\r\n    const [filteredTodos, setfilteredTodos] = useState([] as ITodoTask[]);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<ITodoTask>('/TodoTasks', appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            const filterResult = result.data.filter(todo => todo.isArchived === false);\r\n            const filterArchived = result.data.filter(todo => todo.isArchived === true);\r\n            setfilteredTodos(filterResult);\r\n            setTodos(filterResult);\r\n            setArchivedTodos(filterArchived);\r\n\r\n            let categoryResult = await BaseService.getAll<ITodoCategory>('/TodoCategories', appState.jwt ?? \"\");\r\n\r\n            if (categoryResult.ok && categoryResult.data) {\r\n                setCategories(categoryResult.data);\r\n            }\r\n\r\n            let priorityResult = await BaseService.getAll<ITodoPriority>('/TodoPriorities', appState.jwt ?? \"\");\r\n            if (priorityResult.ok && priorityResult.data) {\r\n                setPriorities(priorityResult.data);\r\n            }\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case \"taskName\":\r\n                setFormValues({ ...formValues, taskName: target.value });\r\n                return;\r\n            case \"todoCategoryId\":\r\n                setFormValues({ ...formValues, todoCategoryId: target.value });\r\n                return;\r\n            case \"todoPriorityId\":\r\n                setFormValues({ ...formValues, todoPriorityId: target.value });\r\n                return;\r\n            case \"taskNameEdit\":\r\n                setSelectedTodo({ ...selectedTodo, taskName: target.value })\r\n                return;\r\n            case \"todoCategoryIdEdit\":\r\n                setSelectedTodo({ ...selectedTodo, todoCategoryId: target.value })\r\n                return;\r\n            case \"todoPriorityIdEdit\":\r\n                setSelectedTodo({ ...selectedTodo, todoPriorityId: target.value })\r\n                return;\r\n            case \"categoryFilter\":\r\n                setCurrentFilters({ ...currentFilters, categoryFilters: target.value });\r\n                filters = { ...filters, categoryFilters: target.value } as ITodoFilters;\r\n                filterTodos(filters);\r\n                return;\r\n            case \"priorityFilter\":\r\n                setCurrentFilters({ ...currentFilters, priorityFilters: target.value });\r\n                filters = { ...filters, priorityFilters: target.value } as ITodoFilters;\r\n                filterTodos(filters);\r\n                return;\r\n            case \"hideDone\":\r\n                setCurrentFilters({ ...currentFilters, hideDone: target.value });\r\n                filters = { ...filters, hideDone: target.value } as ITodoFilters;\r\n                filterTodos(filters);\r\n                return;\r\n            case \"searchValue\":\r\n                setCurrentFilters({ ...currentFilters, searchValue: target.value });\r\n                filters = { ...filters, searchValue: target.value } as ITodoFilters;\r\n                filterTodos(filters);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    const handleDateChange = (target: Date) => {\r\n        setDueDate(target)\r\n\r\n        setFormValues({\r\n            ...formValues,\r\n            dueDt: target\r\n        })\r\n    }\r\n\r\n    const handleEditDateChange = (target: Date) => {\r\n        setSelectedTodo({\r\n            ...selectedTodo,\r\n            dueDt: target\r\n        })\r\n    }\r\n\r\n    const addTodo = async (e: EventTarget) => {\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        });\r\n\r\n        let result = await BaseService.post<ITodoTask>('/TodoTasks', formValues, appState.jwt ?? \"\")\r\n\r\n\r\n        if (result.ok) {\r\n            setFormValues(initialFormValues);\r\n            setDueDate(new Date(Date.now()))\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode,\r\n            })\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages,\r\n            })\r\n        }\r\n    }\r\n\r\n    const editTodo = async (e: EventTarget) => {\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let result = await BaseService.put<ITodoTask>('/TodoTasks', selectedTodo, selectedTodo.id ?? \"\", appState.jwt ?? \"\")\r\n        if (result.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode\r\n            })\r\n            setSelectedTodo(initialSelectedTodo);\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages\r\n            })\r\n        }\r\n    }\r\n\r\n    const setTodoCompletedValue = async (todo: ITodoTask) => {\r\n        todo.isCompleted ? todo.isCompleted = false : todo.isCompleted = true;\r\n        if (!todo.isCompleted) {\r\n            todo.isArchived = false;\r\n        }\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let result = await BaseService.put<ITodoTask>('/TodoTasks', todo, todo.id ?? \"\", appState.jwt ?? \"\")\r\n\r\n        if (result.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode\r\n            })\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const generateDefaultPriorities = async () => {\r\n\r\n        const lowPriority = { priorityName: \"Low\", prioritySort: 0 } as ITodoPriority;\r\n        const normalPriority = { priorityName: \"Normal\", prioritySort: 1 } as ITodoPriority;\r\n        const highPriority = { priorityName: \"High\", prioritySort: 2 } as ITodoPriority;\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let lowResult = await BaseService.post<ITodoPriority>('/TodoPriorities', lowPriority, appState.jwt ?? \"\");\r\n        if (!lowResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: lowResult.statusCode, messages: lowResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let normResult = await BaseService.post<ITodoPriority>('/TodoPriorities', normalPriority, appState.jwt ?? \"\");\r\n        if (!normResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: normResult.statusCode, messages: normResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let highResult = await BaseService.post<ITodoPriority>('/TodoPriorities', highPriority, appState.jwt ?? \"\");\r\n        if (!highResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: highResult.statusCode, messages: highResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Ok, statusCode: highResult.statusCode\r\n        })\r\n\r\n        loadData();\r\n    }\r\n\r\n    const generateDefaultCategories = async () => {\r\n\r\n        const homeCategory = { categoryName: \"Home\", categorySort: 0 } as ITodoCategory;\r\n        const workCategory = { categoryName: \"Work\", categorySort: 1 } as ITodoCategory;\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let homeResult = await BaseService.post<ITodoCategory>('/TodoCategories', homeCategory, appState.jwt ?? \"\");\r\n        if (!homeResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: homeResult.statusCode, messages: homeResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let workResult = await BaseService.post<ITodoCategory>('/TodoCategories', workCategory, appState.jwt ?? \"\");\r\n        if (!workResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: workResult.statusCode, messages: workResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Ok, statusCode: workResult.statusCode\r\n        })\r\n\r\n        loadData();\r\n    }\r\n\r\n    const archiveTodo = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        selectedTodo.isArchived = true;\r\n\r\n        const result = await BaseService.put<ITodoTask>(\"/TodoTasks\", selectedTodo, selectedTodo.id ?? \"\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            let archivedTodo = todos.splice(todos.findIndex(todo => todo.id === selectedTodo.id), 1);\r\n            setTodos(todos);\r\n            archivedTodos.push(archivedTodo[0])\r\n            setSelectedTodo(initialSelectedTodo);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const deleteTodo = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.delete<ITodoTask>(\"/TodoTasks\", selectedTodo.id ?? \"\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            archivedTodos.splice(todos.findIndex(todo => todo.id === selectedTodo.id), 1);\r\n            setArchivedTodos(archivedTodos);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n\r\n        } setSelectedTodo(initialSelectedTodo);\r\n        setFormValues(initialFormValues);\r\n    }\r\n\r\n    const filterTodos = (filters: ITodoFilters) => {\r\n        let filteredValues = todos;\r\n        if (filters.categoryFilters !== \"-1\" && filters.categoryFilters !== undefined) {\r\n            console.log(\"categoryFilter\");\r\n            filteredValues = filteredValues.filter(todo => todo.todoCategoryId === filters.categoryFilters);\r\n\r\n        }\r\n\r\n        if (filters.priorityFilters !== \"-1\" && filters.priorityFilters !== undefined) {\r\n            console.log(\"priorityFilter\");\r\n            filteredValues = filteredValues.filter(todo => todo.todoPriorityId === filters.priorityFilters);\r\n        }\r\n\r\n        if (filters.hideDone !== \"-1\" && filters.hideDone !== undefined) {\r\n            console.log(\"hideDone\");\r\n            console.log(filters.hideDone);\r\n\r\n            filteredValues = filteredValues.filter(todo => todo.isCompleted === (filters.hideDone === \"yes\" ? false : true));\r\n        }\r\n\r\n        if (filters.searchValue !== undefined && filters.searchValue.length > 1) {\r\n            filteredValues = filteredValues.filter(todo => todo.taskName.toLowerCase().includes(filters.searchValue.toLowerCase()));\r\n        }\r\n\r\n        setfilteredTodos(filteredValues);\r\n    }\r\n\r\n    const panelIsVisible = (panelQuerySelector: string): boolean => {\r\n        const panel = document.querySelector(panelQuerySelector);\r\n        if (panel?.classList.contains(\"hidden\")) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const setPanelVisible = (visible: boolean, openerQuerySelector: string, openableQuerySelector: string, value: string) => {\r\n        const panel = document.querySelector(openerQuerySelector) as HTMLDivElement;\r\n        const accordion = document.querySelector(openableQuerySelector) as HTMLDivElement;\r\n\r\n        if (visible) {\r\n            panel.classList.add(\"hidden\");\r\n            accordion.classList.add(\"h-auto\");\r\n            accordion.innerHTML = value;\r\n        } else {\r\n            panel.classList.remove(\"hidden\");\r\n            accordion.innerHTML = value;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Loader pageStatus={pageStatus} />\r\n            {appState.jwt !== null\r\n                ?\r\n                <div className=\"flex lg:flex-row flex-col justify-evenly\">\r\n                    <div className=\"lg:hidden accordion cursor-pointer text-right\"\r\n                        onClick={() => panelIsVisible(\".panel\") ? setPanelVisible(true, \".panel\", \".accordion\", \"⬇\") : setPanelVisible(false, \".panel\", \".accordion\", \"⬆\")}\r\n                    ><span className=\"italic text-sm text-white\"> Click to add new todos → </span>⬇\r\n                    </div>\r\n                    <div className=\"flex-col lg:space-y-12 panel lg:flex hidden\">\r\n                        {\r\n                            selectedTodo.id !== \"\"\r\n                                ?\r\n                                <TodosEdit\r\n                                    values={selectedTodo}\r\n                                    handleChange={handleChange}\r\n                                    handleDateChange={handleEditDateChange}\r\n                                    categories={categories}\r\n                                    priorities={priorities}\r\n                                    editTodo={editTodo}\r\n                                    archiveTodo={archiveTodo}\r\n                                    deleteTodo={deleteTodo}\r\n                                />\r\n                                :\r\n                                <TodosAdd\r\n                                    values={formValues}\r\n                                    handleChange={handleChange}\r\n                                    addTodo={addTodo}\r\n                                    pageStatus={pageStatus}\r\n                                    categories={categories}\r\n                                    priorities={priorities}\r\n                                    handleDateChange={handleDateChange}\r\n                                    date={dueDate}\r\n                                    generateDefaultPriorities={generateDefaultPriorities}\r\n                                    generateDefaultCategories={generateDefaultCategories}\r\n                                />\r\n                        }\r\n                    </div>\r\n                    <div className=\"flex flex-col\">\r\n                        <div className=\"flex flex-row justify-center\">\r\n                            <div className=\"flex flex-row sm:w-120 w-96\">\r\n                                <Input\r\n                                    handleChange={handleChange}\r\n                                    id=\"searchValue\"\r\n                                    labelValue=\"Search\"\r\n                                    type=\"text\"\r\n                                    value={currentFilters.searchValue}\r\n                                    classNames=\"w-full\"\r\n                                />\r\n\r\n                                <div\r\n                                    className=\"filter-accordion p-2 text-center flex cursor-pointer border-white rounded-md border m-auto text-white hover:text-blue-500 hover:bg-white\"\r\n                                    onClick={() => panelIsVisible(\".filter-panel\") ? setPanelVisible(true, \".filter-panel\", \".filter-accordion\", \"Show filters\") : setPanelVisible(false, \".filter-panel\", \".filter-accordion\", \"Hide filters\")}\r\n                                >\r\n                                    Show filters\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-row justify-center filter-panel hidden\">\r\n                            <div className=\"flex flex-row sm:w-120 w-96 justify-between\">\r\n                                <Filter\r\n                                    handleChange={handleChange}\r\n                                    id=\"categoryFilter\"\r\n                                    labelValue=\"Category filter\"\r\n                                    value={currentFilters.categoryFilters}\r\n                                    type=\"selectList\"\r\n                                    options={categories.map(category => {\r\n                                        return (\r\n                                            <SelectOption\r\n                                                value={category.id ?? \"\"}\r\n                                                key={category.id ?? \"\"}\r\n                                                displayName={category.categoryName} />)\r\n                                    })}\r\n                                />\r\n                                <Filter\r\n                                    handleChange={handleChange}\r\n                                    id=\"priorityFilter\"\r\n                                    labelValue=\"Priority filter\"\r\n                                    value={currentFilters.priorityFilters}\r\n                                    type=\"selectList\"\r\n                                    options={priorities.map(priority => {\r\n                                        return (\r\n                                            <SelectOption\r\n                                                value={priority.id ?? \"\"}\r\n                                                key={priority.id ?? \"\"}\r\n                                                displayName={priority.priorityName} />)\r\n                                    })}\r\n                                />\r\n                                <Filter\r\n                                    handleChange={handleChange}\r\n                                    id=\"hideDone\"\r\n                                    labelValue=\"Hide done\"\r\n                                    type=\"selectList\"\r\n                                    value={currentFilters.hideDone}\r\n                                    options={\r\n                                        new Array(\r\n                                            <>\r\n                                                <SelectOption\r\n                                                    value=\"yes\"\r\n                                                    key=\"1\"\r\n                                                    displayName=\"yes\" />\r\n\r\n                                            </>\r\n                                        )\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <TodoList\r\n                            values={filteredTodos}\r\n                            setSelectedTodo={setSelectedTodo}\r\n                            selectedTodo={selectedTodo}\r\n                            setTodoCompletedValue={setTodoCompletedValue}\r\n                        />\r\n                        {\r\n                            archivedTodos.length > 0\r\n                                ?\r\n                                <>\r\n                                    <div className=\"archived-accordion cursor-pointer text-right\"\r\n                                        onClick={() => panelIsVisible(\".archived-panel\") ? setPanelVisible(true, \".archived-panel\", \".archived-accordion\", \"📁\") : setPanelVisible(false, \".archived-panel\", \".archived-accordion\", \"📂\")}>\r\n                                        <span className=\"italic text-sm text-white\">Show archived todos → </span>📁\r\n                                    </div>\r\n                                    <div className=\"archived-panel hidden\">\r\n                                        <TodoList\r\n                                            values={archivedTodos}\r\n                                            setSelectedTodo={setSelectedTodo}\r\n                                            selectedTodo={selectedTodo}\r\n                                            setTodoCompletedValue={setTodoCompletedValue}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                <></>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                :\r\n                <Redirect to=\"/\" />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodosIndex;\r\n","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst HomeIndex = () => {\r\n    const appState = useContext(AppContext);\r\n    return (\r\n        <div className=\"flex flex-col cursor-default\">\r\n            <p className=\"text-9xl font-bold text-pink-200\">Todos.</p>\r\n            {\r\n                appState.jwt === null\r\n                    ?\r\n                    <p className=\"text-2xl font-bold text-pink-200 pl-6\">\r\n                        <Link className=\"hover:text-white\" to=\"/identity/login\">Login</Link> to get started\r\n                    </p>\r\n                    :\r\n                    <p className=\"text-2xl font-bold text-pink-200 pl-6 italic\">\r\n                        You miss 100% of the shots you don't take.\r\n                    </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeIndex;\r\n","import Axios, { AxiosError } from \"axios\";\r\nimport { LoginUrl } from \"../configuration\";\r\nimport { IFetchResponse } from \"../types/IFetchResponse\";\r\nimport { ILoginValues } from '../dtos/ILoginValues';\r\nimport { IRegisterValues } from \"../dtos/IRegisterValues\";\r\n\r\nexport abstract class AccountService {\r\n\r\n    protected static axios = Axios.create({\r\n        baseURL: LoginUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    static login = async<TEntity>(loginData: ILoginValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Login', JSON.stringify(loginData));\r\n\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    static register = async <TEntity>(registerData: IRegisterValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Register', JSON.stringify(registerData));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { useContext, useState } from \"react\"\r\nimport { Redirect } from \"react-router\";\r\nimport Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ILoginValues } from \"../../dtos/ILoginValues\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nconst initialFormValues: ILoginValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n};\r\n\r\nexport interface ILoginProps {\r\n    values: ILoginValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    } as IPageStatus);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.login({\r\n            email: formValues.email,\r\n            password: formValues.password\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.firstName, jwtResponse.lastName);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages })\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        if (target.id === \"email\") {\r\n            setFormValues({ ...formValues, email: target.value })\r\n        }\r\n        if (target.id === \"password\") {\r\n            setFormValues({ ...formValues, password: target.value })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/todos\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst FormView = (props: ILoginProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n                <form className=\"p-2 w-96 sm:w-120 text-white space-y-4\">\r\n                    <Input\r\n                        type=\"email\"\r\n                        value={props.values.email ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Email\"\r\n                        id=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        value={props.values.password ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"password\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"bg-green-500 w-full text-white\"\r\n                        action={props.toggleAuthStatus}\r\n                        value=\"Login\"\r\n                    />\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IRegisterValues } from \"../../dtos/IRegisterValues\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nconst initialFormValues: IRegisterValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n}\r\n\r\nexport interface IRegisterProps {\r\n    values: IRegisterValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    } as IPageStatus);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.register({\r\n            email: formValues.email,\r\n            password: formValues.password,\r\n            firstName: formValues.firstName,\r\n            lastName: formValues.lastName,\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.firstName, jwtResponse.lastName)\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"email\":\r\n                setFormValues({ ...formValues, email: target.value })\r\n                break;\r\n            case \"password\":\r\n                setFormValues({ ...formValues, password: target.value })\r\n                break;\r\n            case \"firstName\":\r\n                setFormValues({ ...formValues, firstName: target.value })\r\n                break;\r\n            case \"lastName\":\r\n                setFormValues({ ...formValues, lastName: target.value })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/todos\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst FormView = (props: IRegisterProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n                <form className=\"p-2 w-96 sm:w-120 text-white space-y-4\">\r\n                    <Input\r\n                        type=\"email\"\r\n                        value={props.values.email ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Email\"\r\n                        id=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        value={props.values.password ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"password\"\r\n                    />\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={props.values.firstName ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"First Name\"\r\n                        id=\"firstName\"\r\n                    />\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={props.values.lastName ?? \"\"}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Last Name\"\r\n                        id=\"lastName\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"bg-yellow-600 w-full text-black\"\r\n                        action={props.toggleAuthStatus}\r\n                        value=\"Register\"\r\n                    />\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n","import Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\n\r\nexport interface CategoryAddProps {\r\n    handleChange: (targer: HTMLInputElement) => void;\r\n    values: ITodoCategory;\r\n    addCategory: (target: EventTarget) => void;\r\n}\r\n\r\nconst CategoryAdd = (props: CategoryAddProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        classNames=\"p-1 bg-white text-black\"\r\n                        value={props.values.categoryName}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Category name\"\r\n                        id=\"categoryName\"\r\n                    />\r\n                    <Input\r\n                        type=\"number\"\r\n                        classNames=\"p-1 bg-white text-black\"\r\n                        value={props.values.categorySort}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Priority\"\r\n                        id=\"categorySort\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"p-2 bg-green-600 w-full font-bold text-white\"\r\n                        action={props.addCategory}\r\n                        value=\"Add\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>);\r\n}\r\n\r\nexport default CategoryAdd;","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { initialSelectedCategory } from \"./CategoriesIndex\";\r\n\r\nexport interface ICategoryCardProps {\r\n    categories: ITodoCategory[];\r\n    removeCategory: (category: ITodoCategory) => void;\r\n    selectCategory: (category: ITodoCategory) => void;\r\n    selectedCategory: ITodoCategory;\r\n}\r\n\r\nconst CategoryCards = (props: ICategoryCardProps) => {\r\n\r\n    const CategoryCard = (category: ITodoCategory) => {\r\n        return (\r\n            <div className=\"flex w-full h-14 dark:border-white border rounded-md\">\r\n                {\r\n                    props.selectedCategory.id === category.id\r\n                        ?\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedCategory.id === category.id ? props.selectCategory(initialSelectedCategory) : props.selectCategory(category)}\r\n                                className=\"flex w-3/5 flex-row space-x-4 p-4 rounded-l-md bg-yellow-100 text-blue-500 dark:text-white dark:bg-gray-600 cursor-pointer\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {category.categoryName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {category.categorySort}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex w-2/5 flex-row \">\r\n                                <button\r\n                                    className=\" w-full h-full p-4 bg-red-500 rounded-r-md text-white\"\r\n                                    onClick={() => props.removeCategory(category)}>\r\n                                    Remove\r\n                            </button>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedCategory.id === category.id ? props.selectCategory(initialSelectedCategory) : props.selectCategory(category)}\r\n                                className=\"flex w-full flex-row space-x-4 p-4 rounded-md bg-white text-blue-500 dark:text-white dark:bg-transparent cursor-pointer hover:bg-yellow-200 dark:hover:bg-gray-400\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {category.categoryName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {category.categorySort}\r\n                                </div>\r\n                                <div>\r\n                                    ↙\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"space-y-2\">\r\n            {\r\n                props.categories\r\n                    .sort((a, b) => a.categorySort > b.categorySort ? -1 : 1)\r\n                    .map(category => {\r\n                        return <CategoryCard {...category} key={category.id} />;\r\n                    })\r\n            }\r\n        </div>)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default CategoryCards;\r\n","import Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\n\r\ninterface ICategoryEditProps {\r\n    handleEditChange: (target: HTMLInputElement) => void;\r\n    values: ITodoCategory;\r\n    editCategory: (target: EventTarget) => void;\r\n}\r\n\r\nconst CategoryEdit = (props: ICategoryEditProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={props.values.categoryName}\r\n                        handleChange={props.handleEditChange}\r\n                        labelValue=\"Category name\"\r\n                        id=\"categoryName\"\r\n                    />\r\n                    <Input\r\n                        type=\"number\"\r\n                        value={props.values.categorySort}\r\n                        handleChange={props.handleEditChange}\r\n                        labelValue=\"Priority\"\r\n                        id=\"categorySort\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"text-black bg-yellow-300 w-full\"\r\n                        action={props.editCategory}\r\n                        value=\"Edit\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CategoryEdit;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport CategoryAdd from \"./CategoryAdd\";\r\nimport CategoryCards from \"./CategoryCards\";\r\nimport CategoryEdit from \"./CategoryEdit\";\r\n\r\n\r\nconst initialFormValues: ITodoCategory = {\r\n    categoryName: \"\",\r\n    categorySort: 0,\r\n}\r\n\r\nexport const initialSelectedCategory: ITodoCategory = {\r\n    categoryName: \"\",\r\n    categorySort: 0\r\n}\r\n\r\nconst CategoriesIndex = () => {\r\n    const [categories, setCategories] = useState([] as ITodoCategory[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [formValues, setFormValues] = useState(initialFormValues)\r\n    const [selectedCategory, setSelectedCategory] = useState(initialSelectedCategory);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    console.log(selectedCategory);\r\n\r\n    const loadData = async () => {\r\n        const result = await BaseService.getAll<ITodoCategory>(\"/TodoCategories\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setCategories(result.data);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const addCategory = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.post<ITodoCategory>(\"/TodoCategories\", formValues, appState.jwt ?? \"\");\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const removeCategory = async (category: ITodoCategory) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.delete<ITodoCategory>(\"/TodoCategories\", category.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedCategory(initialSelectedCategory);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const editCategory = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.put<ITodoCategory>(\"/TodoCategories\", selectedCategory, selectedCategory.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedCategory(initialSelectedCategory);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"categoryName\":\r\n                setFormValues({ ...formValues, categoryName: target.value })\r\n                return;\r\n            case \"categorySort\":\r\n                setFormValues({ ...formValues, categorySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleEditChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"categoryName\":\r\n                setSelectedCategory({ ...selectedCategory, categoryName: target.value })\r\n                return;\r\n            case \"categorySort\":\r\n                setSelectedCategory({ ...selectedCategory, categorySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.jwt !== null\r\n                    ?\r\n                    <>\r\n                        <Loader pageStatus={pageStatus} />\r\n                        <div className=\"flex flex-col border-b border-t border-white p-4 space-y-4\">\r\n                            {\r\n                                selectedCategory.id\r\n                                    ?\r\n                                    <CategoryEdit\r\n                                        handleEditChange={handleEditChange}\r\n                                        values={selectedCategory}\r\n                                        editCategory={editCategory}\r\n                                    />\r\n                                    :\r\n                                    <CategoryAdd\r\n                                        handleChange={handleChange}\r\n                                        values={formValues}\r\n                                        addCategory={addCategory}\r\n                                    />\r\n                            }\r\n                            <CategoryCards\r\n                                removeCategory={removeCategory}\r\n                                categories={categories}\r\n                                selectCategory={setSelectedCategory}\r\n                                selectedCategory={selectedCategory}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CategoriesIndex;","import React from \"react\";\r\nimport Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\n\r\nexport interface PriorityAddProps {\r\n    handleChange: (targer: HTMLInputElement) => void;\r\n    values: ITodoPriority;\r\n    addPriority: (target: EventTarget) => void;\r\n}\r\n\r\nconst PriorityAdd = (props: PriorityAddProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={props.values.priorityName}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Priority Name\"\r\n                        id=\"priorityName\"\r\n                    />\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={props.values.prioritySort}\r\n                        handleChange={props.handleChange}\r\n                        labelValue=\"Priority level\"\r\n                        id=\"prioritySort\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"bg-green-600 w-full\"\r\n                        action={props.addPriority}\r\n                        value=\"Add\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>);\r\n}\r\n\r\nexport default PriorityAdd;","import { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { initialSelectedPriority } from \"./PrioritiesIndex\";\r\n\r\nexport interface IPriorityCardProps {\r\n    priorities: ITodoPriority[];\r\n    removePriority: (priority: ITodoPriority) => void;\r\n    selectPriority: (priority: ITodoPriority) => void;\r\n    selectedPriority: ITodoPriority;\r\n}\r\n\r\nconst PriorityCards = (props: IPriorityCardProps) => {\r\n\r\n    const PriorityCard = (priority: ITodoPriority) => {\r\n        return (\r\n            <div className=\"flex w-full h-14 dark:border-white border rounded-md\">\r\n                {\r\n                    props.selectedPriority.id === priority.id\r\n                        ?\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedPriority.id === priority.id ? props.selectPriority(initialSelectedPriority) : props.selectPriority(priority)}\r\n                                className=\"flex w-4/5 flex-row space-x-4 p-4 rounded-l-md bg-yellow-100 text-blue-500 dark:text-white dark:bg-transparent cursor-pointer\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {priority.priorityName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority Level: </label>\r\n                                    {priority.prioritySort}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex w-1/5 flex-row \">\r\n                                <button\r\n                                    className=\" w-full h-full p-4 bg-red-500 rounded-r-md text-white\"\r\n                                    onClick={() => props.removePriority(priority)}>\r\n                                    Remove\r\n                            </button>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedPriority.id === priority.id ? props.selectPriority(initialSelectedPriority) : props.selectPriority(priority)}\r\n                                className=\"flex w-full flex-row space-x-4 p-4 rounded-md bg-white text-blue-500 dark:text-white dark:bg-transparent cursor-pointer hover:bg-yellow-200 dark:hover:bg-gray-400\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {priority.priorityName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {priority.prioritySort}\r\n                                </div>\r\n                                <div>\r\n                                    ↙\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"space-y-2\">\r\n            {\r\n                props.priorities\r\n                    .sort((a, b) => a.prioritySort > b.prioritySort ? -1 : 1)\r\n                    .map(priority => {\r\n                        return <PriorityCard {...priority} key={priority.id} />;\r\n                    })\r\n            }\r\n        </div>)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default PriorityCards;\r\n","import React from \"react\";\r\nimport Button from \"../../components/Button\";\r\nimport Input from \"../../components/Input\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\n\r\ninterface IPriorityEditProps {\r\n    handleEditChange: (target: HTMLInputElement) => void;\r\n    values: ITodoPriority;\r\n    editPriority: (target: EventTarget) => void;\r\n}\r\n\r\nconst PriorityEdit = (props: IPriorityEditProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        classNames=\"p-1 bg-white text-black\"\r\n                        value={props.values.priorityName}\r\n                        handleChange={props.handleEditChange}\r\n                        labelValue=\"Priority Name\"\r\n                        id=\"priorityName\"\r\n                    />\r\n                    <Input\r\n                        type=\"text\"\r\n                        classNames=\"p-1 bg-white text-black\"\r\n                        value={props.values.prioritySort}\r\n                        handleChange={props.handleEditChange}\r\n                        labelValue=\"Priority level\"\r\n                        id=\"prioritySort\"\r\n                    />\r\n                    <Button\r\n                        classNames=\"text-black bg-yellow-300 w-full \"\r\n                        action={props.editPriority}\r\n                        value=\"Edit\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PriorityEdit;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport PriorityAdd from \"./PriorityAdd\";\r\nimport PriorityCards from \"./PriorityCards\";\r\nimport PriorityEdit from \"./PriorityEdit\";\r\n\r\n\r\nconst initialFormValues: ITodoPriority = {\r\n    priorityName: \"\",\r\n    prioritySort: 0\r\n}\r\n\r\nexport const initialSelectedPriority: ITodoPriority = {\r\n    priorityName: \"\",\r\n    prioritySort: 0\r\n}\r\n\r\nconst PrioritiesIndex = () => {\r\n    const [priorities, setPriorities] = useState([] as ITodoPriority[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [formValues, setFormValues] = useState(initialFormValues)\r\n    const [selectedPriority, setSelectedPriority] = useState(initialSelectedPriority);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    console.log(selectedPriority);\r\n\r\n    const loadData = async () => {\r\n        const result = await BaseService.getAll<ITodoPriority>(\"/TodoPriorities\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setPriorities(result.data);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const addPriority = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.post<ITodoPriority>(\"/TodoPriorities\", formValues, appState.jwt ?? \"\");\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const removePriority = async (category: ITodoPriority) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.delete<ITodoPriority>(\"/TodoPriorities\", category.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedPriority(initialSelectedPriority);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const editPriority = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.put<ITodoPriority>(\"/TodoPriorities\", selectedPriority, selectedPriority.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedPriority(initialSelectedPriority);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"priorityName\":\r\n                setFormValues({ ...formValues, priorityName: target.value })\r\n                return;\r\n            case \"prioritySort\":\r\n                setFormValues({ ...formValues, prioritySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleEditChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"priorityName\":\r\n                setSelectedPriority({ ...selectedPriority, priorityName: target.value })\r\n                return;\r\n            case \"prioritySort\":\r\n                setSelectedPriority({ ...selectedPriority, prioritySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.jwt !== null\r\n                    ?\r\n                    <>\r\n                        <Loader pageStatus={pageStatus} />\r\n                        <div className=\"flex flex-col border-b border-t border-white p-4 space-y-4\">\r\n                            {\r\n                                selectedPriority.id\r\n                                    ?\r\n                                    <PriorityEdit\r\n                                        handleEditChange={handleEditChange}\r\n                                        values={selectedPriority}\r\n                                        editPriority={editPriority}\r\n                                    />\r\n                                    :\r\n                                    <PriorityAdd\r\n                                        handleChange={handleChange}\r\n                                        values={formValues}\r\n                                        addPriority={addPriority}\r\n                                    />\r\n                            }\r\n                            <PriorityCards\r\n                                removePriority={removePriority}\r\n                                priorities={priorities}\r\n                                selectPriority={setSelectedPriority}\r\n                                selectedPriority={selectedPriority}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default PrioritiesIndex;","import React, { useState } from 'react';\r\nimport { AppContextProvider, initialAppState } from './context/AppContext';\r\nimport Header from './components/Header';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Page404 from './containers/Page404';\r\nimport TodosIndex from './containers/todos/TodosIndex';\r\nimport HomeIndex from './containers/home/HomeIndex';\r\nimport LoginForm from './containers/identity/LoginForm';\r\nimport RegisterForm from './containers/identity/RegisterForm';\r\nimport CategoriesIndex from './containers/categories/CategoriesIndex';\r\nimport PrioritiesIndex from './containers/priorities/PrioritiesIndex';\r\n\r\nfunction App() {\r\n    const setAuthInfo = (jwt: string | null, firstName: string, lastName: string): void => {\r\n        setAppState({ ...appState, jwt, firstName, lastName });\r\n    }\r\n\r\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo })\r\n\r\n    return (\r\n        <AppContextProvider value={appState}>\r\n            <div className=\"dark:bg-gray-800 bg-blue-700 min-h-screen\">\r\n                <Header />\r\n                <main className=\"p-4\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={HomeIndex} />\r\n\r\n                        <Route exact path=\"/identity/login\" component={LoginForm} />\r\n                        <Route exact path=\"/identity/register\" component={RegisterForm} />\r\n\r\n                        <Route exact path=\"/todos\" component={TodosIndex} />\r\n\r\n                        <Route exact path=\"/categories\" component={CategoriesIndex} />\r\n\r\n                        <Route exact path=\"/priorities\" component={PrioritiesIndex} />\r\n\r\n                        <Route component={Page404} />\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n        </AppContextProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport 'jquery';\r\nimport 'popper.js';\r\n\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './assets/site.css';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport \"react-datepicker/dist/react-datepicker.min.css\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}