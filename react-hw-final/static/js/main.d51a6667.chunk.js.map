{"version":3,"sources":["types/EPageStatus.ts","context/AppContext.ts","components/Header.tsx","containers/Page404.tsx","components/Loader.tsx","services/base-service.ts","configuration.ts","containers/todos/TodoList.tsx","containers/todos/TodosAdd.tsx","containers/todos/TodosEdit.tsx","containers/todos/TodosIndex.tsx","containers/home/HomeIndex.tsx","services/account-service.ts","containers/identity/LoginForm.tsx","containers/identity/RegisterForm.tsx","containers/categories/CategoryAdd.tsx","containers/categories/CategoryCards.tsx","containers/categories/CategoryEdit.tsx","containers/categories/CategoriesIndex.tsx","containers/priorities/PriorityAdd.tsx","containers/priorities/PriorityCards.tsx","containers/priorities/PriorityEdit.tsx","containers/priorities/PrioritiesIndex.tsx","App.tsx","index.tsx"],"names":["EPageStatus","initialAppState","jwt","firstName","lastName","setAuthInfo","loading","AppContext","React","createContext","AppContextProvider","Provider","Consumer","Header","changeTheme","theme","html","document","querySelector","classList","contains","remove","updateButtonValue","add","isDarkTheme","useState","buttonValue","appState","useContext","className","to","title","onClick","Page404","Loader","props","pageStatus","Loading","Error","id","e","hideErrors","statusCode","messages","map","message","BaseService","headers","Authorization","_axios","Axios","create","baseURL","getAll","apiEndpoint","a","get","getAxiosConfiguration","response","ok","status","data","axError","post","entity","JSON","stringify","put","delete","TodoList","toDateString","date","separator","getDate","getMonth","getFullYear","values","sort","b","isCompleted","Date","dueDt","todo","selectedTodo","setSelectedTodo","initialSelectedTodo","taskName","createdDt","type","checked","onChange","setTodoCompletedValue","TodosAdd","value","handleChange","target","selected","handleDateChange","dateFormat","minDate","now","htmlFor","categories","length","todoCategoryId","category","categoryName","generateDefaultCategories","preventDefault","priorities","todoPriorityId","priority","priorityName","generateDefaultPriorities","addTodo","TodosEdit","editTodo","removeTodo","initialFormValues","taskSort","isArchived","TodosIndex","formValues","setFormValues","todos","setTodos","setPageStatus","setCategories","setPriorities","dueDate","setDueDate","loadData","result","categoryResult","priorityResult","Ok","console","log","lowPriority","prioritySort","normalPriority","highPriority","lowResult","normResult","highResult","homeCategory","categorySort","workCategory","homeResult","workResult","splice","findIndex","setPanelVisible","visible","panel","accordion","innerHTML","useEffect","panelIsVisible","HomeIndex","AccountService","axios","login","loginData","register","registerData","email","password","FormView","autoComplete","toggleAuthStatus","LoginForm","jwtResponse","token","RegisterForm","CategoryAdd","addCategory","CategoryCards","CategoryCard","selectedCategory","selectCategory","initialSelectedCategory","removeCategory","key","CategoryEdit","handleEditChange","editCategory","CategoriesIndex","setSelectedCategory","Number","parseInt","PriorityAdd","addPriority","PriorityCards","PriorityCard","selectedPriority","selectPriority","initialSelectedPriority","removePriority","PriorityEdit","editPriority","PrioritiesIndex","setSelectedPriority","App","setAppState","exact","path","component","ReactDOM","render","basename","process","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d51a6667.chunk.js","sourcesContent":["export enum EPageStatus {\r\n    Loading = \"Loading...\",\r\n    Error = \"Error...\",\r\n    Ok = \"Ok\",\r\n}\r\n","import React from 'react';\r\n\r\nexport interface IAppState {\r\n    jwt: string | null;\r\n    firstName: string;\r\n    lastName: string;\r\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string) => void,\r\n    loading: boolean;\r\n};\r\n\r\nexport const initialAppState: IAppState = {\r\n    jwt: null,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    setAuthInfo: (): void => { },\r\n    loading: false,\r\n};\r\n\r\nexport const AppContext = React.createContext<IAppState>(initialAppState);\r\nexport const AppContextProvider = AppContext.Provider;\r\nexport const AppContextConsumer = AppContext.Consumer;\r\n","import React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Header = () => {\r\n    //#region Theme\r\n    const changeTheme = (theme: 'dark' | '') => {\r\n        let html = document.querySelector('html');\r\n        if (theme === 'dark' && !html?.classList.contains('dark')) {\r\n            updateButtonValue('☀');\r\n            html?.classList.add(theme);\r\n        } else {\r\n            html?.classList.remove('dark');\r\n            updateButtonValue('🌑')\r\n        }\r\n    }\r\n\r\n    const isDarkTheme = (): boolean => {\r\n        let html = document.querySelector('html');\r\n        if (html?.classList.contains('dark')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    const [buttonValue, updateButtonValue] = useState(isDarkTheme() ? '☀' : '🌑');\r\n\r\n    //#endregion\r\n\r\n    //#region AppState\r\n\r\n    let appState = useContext(AppContext)\r\n\r\n    const logOut = (): void => {\r\n        appState.setAuthInfo(null, '', '');\r\n    }\r\n\r\n    //#endregion\r\n\r\n    return (\r\n        <header className=\"flex p-2 bg-blue-700 dark:bg-gray-800 justify-between\">\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    <li className=\"flex-auto\">\r\n                        <Link className=\"block px-2 text-white \" to=\"/\" title=\"Home\">\r\n                            <span className=\"text-2xl animal\"></span>\r\n                        </Link>\r\n                    </li>\r\n                    {\r\n                        appState.jwt === null\r\n                            ?\r\n                            <></>\r\n                            :\r\n                            <>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/todos\">\r\n                                        Todo list\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/categories\">\r\n                                        Categories\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"flex-auto\">\r\n                                    <NavLink className=\"block p-2 text-white dark:hover:bg-pink-100 dark:hover:text-black font-semibold\" \r\n                                    to=\"/priorities\">\r\n                                        Priorities\r\n                                    </NavLink>\r\n                                </li>\r\n                            </>\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    {appState.jwt === null\r\n                        ?\r\n                        <>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\" to=\"/identity/login\">\r\n                                    Login\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\" to=\"/identity/register\">\r\n                                    Register\r\n                                </NavLink>\r\n                            </li>\r\n                        </>\r\n                        :\r\n                        <li>\r\n                            <button\r\n                                onClick={() => logOut()}\r\n                                className=\"block p-2 text-white hover:bg-pink-100 hover:text-black font-semibold\">\r\n                                Log Out\r\n                            </button>\r\n                        </li>\r\n                    }\r\n                </ul>\r\n                {\r\n                    isDarkTheme()\r\n                        ?\r\n                        <button className=\"text-white\" onClick={() => changeTheme('')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                        :\r\n                        <button onClick={() => changeTheme('dark')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                }\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Page404 = () => {\r\n    const appState = useContext(AppContext);\r\n    return (\r\n        <div className=\"flex flex-row justify-center text-white\">\r\n            <div className=\"flex flex-col space-y-20\">\r\n                <div>Sadly, this page does not exist.</div>\r\n                <div className=\"flex flex-row justify-evenly font-semibold\">\r\n                    <Link to=\"/\">Home</Link>|\r\n                    {\r\n                        appState.jwt === null\r\n                            ?\r\n                            <>\r\n                                <Link to=\"/identity/login\">Login</Link>|\r\n                                <Link to=\"/identity/register\">Register</Link>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <Link to=\"/todos\">Todo list</Link>|\r\n                                <Link to=\"/categories\">Categories</Link>|\r\n                                <Link to=\"/priorities\">Priorities</Link>\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;\r\n","import { EPageStatus } from \"../types/EPageStatus\";\r\nimport { IPageStatus } from \"../types/IPageStatus\";\r\n\r\nconst Loader = (props: { pageStatus: IPageStatus }) => {\r\n\r\n    const hideErrors = (e: EventInit) => {\r\n        document.querySelector('#error')?.classList.add('hidden');\r\n    }\r\n\r\n    switch (props.pageStatus.pageStatus) {\r\n        case EPageStatus.Loading:\r\n            return (\r\n                <div className=\"absolute top-0 right-0 bottom-0 left-0 w-full h-full bg-gray-600 grid opacity-60 justify-center content-center \">\r\n                    <div className=\"lds-ring\"><div className=\"dark:boder-white\"></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            )\r\n        case EPageStatus.Error:\r\n            return (\r\n                <div id=\"error\" onClick={(e) => hideErrors(e)} className=\"absolute top-0 bg-red-300 p-4 rounded-br-md\">\r\n                    Error {props.pageStatus.statusCode}\r\n                    <br></br>\r\n                    <ul>\r\n                        {props.pageStatus.messages?.map(message => {\r\n                            return <li>{message}</li>\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>)\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n","import { ApiBaseUrl } from './../configuration';\r\nimport Axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { IFetchResponse } from '../types/IFetchResponse';\r\n\r\nexport abstract class BaseService {\r\n    protected static _axios = Axios.create({\r\n        baseURL: ApiBaseUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\r\n        if (!jwt) return undefined;\r\n        const config: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: 'Bearer ' + jwt\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    static getAll = async <TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await BaseService._axios\r\n                .get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity[]\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static get = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.get<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static post = async <TEntity>(apiEndpoint: string, entity: TEntity, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.post<TEntity>(apiEndpoint, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static put = async <TEntity>(apiEndpoint: string, entity: TEntity, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.put<TEntity>(`${apiEndpoint}/${id}`, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n    static delete = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.delete<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const ApiBaseUrl = \"https://taltech.akaver.com/api/v1/\";\r\nexport const LoginUrl = \"https://taltech.akaver.com/api/v1/Account/\";","import { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { initialSelectedTodo } from \"./TodosIndex\";\r\n\r\nexport interface ITodosListProps {\r\n    values: ITodoTask[];\r\n    setSelectedTodo: (todo: ITodoTask) => void;\r\n    selectedTodo: ITodoTask;\r\n    setTodoCompletedValue: (todo: ITodoTask) => void;\r\n}\r\n\r\nconst TodoList = (props: ITodosListProps) => {\r\n    const toDateString = (date: Date, separator: string = \".\"): string => {\r\n        return `${date.getDate() > 9 ? date.getDate() : \"0\" + date.getDate()}${separator}${(date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : \"0\" + (date.getMonth() + 1)}${separator}${date.getFullYear()}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <div className=\"flex flex-col sm:w-120 w-96 cursor-default\">\r\n\r\n                <div className=\"flex flex-row justify-between font-semibold text-white\">\r\n                    <div className=\"sm:w-2/4 w-2/3\">Task</div>\r\n                    <div className=\"sm:w-1/4 sm:block hidden\">Added</div>\r\n                    <div className=\"sm:w-1/4 w-1/3\">Due date</div>\r\n                    <div className=\"w-4\"></div>\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                    {props.values\r\n                        .sort((a, b) => {\r\n                            if (a.isCompleted === b.isCompleted) {\r\n                                return (\r\n                                    new Date(a.dueDt ?? \"\") < new Date(b.dueDt ?? \"\") ? -1 : 1\r\n                                )\r\n                            } else if (a.isCompleted) {\r\n                                return 1\r\n                            } else {\r\n                                return -1\r\n                            }\r\n                        })\r\n                        .map(todo => {\r\n                            if (todo.id === props.selectedTodo.id) {\r\n                                return (\r\n                                    <div className=\"flex flex-row justify-between p-1 border rounded-md border-yellow-100 bg-yellow-200 text-black cursor-pointer\">\r\n                                        <div\r\n                                            onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                            className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                            <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                            <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                            <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                        </div>\r\n                                        <div><input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input></div>\r\n                                    </div>\r\n                                )\r\n                            } else {\r\n                                if (!todo.isCompleted) {\r\n                                    return (\r\n                                        <div className=\"flex flex-row justify-between p-1 border rounded-md border-white hover:bg-yellow-200 hover:text-black text-white cursor-pointer\">\r\n                                            <div\r\n                                                onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                                className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                                <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                                <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                                <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <div className=\"flex flex-row justify-between p-1 border rounded-md border-white hover:bg-yellow-200 hover:text-black text-white opacity-30 cursor-pointer\">\r\n                                            <div\r\n                                                onClick={(e) => props.selectedTodo.id === todo.id ? props.setSelectedTodo(initialSelectedTodo) : props.setSelectedTodo(todo)}\r\n                                                className=\"flex flex-row justify-between w-full\" id={todo.id}>\r\n                                                <div className=\"sm:w-2/4  w-2/3\">{todo.taskName}</div>\r\n                                                <div className=\"sm:w-1/4 sm:block hidden\">{toDateString(new Date(todo.createdDt ?? new Date()))}</div>\r\n                                                <div className=\"sm:w-1/4  w-1/3\">{toDateString(new Date(todo.dueDt))}</div>\r\n                                            </div>\r\n                                            <div>\r\n                                                <input className=\"h-4 w-4\" type=\"checkbox\" checked={todo.isCompleted} onChange={() => { props.setTodoCompletedValue(todo) }}></input>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            }\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport interface ITodoAddProps {\r\n    values: ITodoTask;\r\n    handleChange: (target: HTMLInputElement | HTMLSelectElement) => void;\r\n    handleDateChange: (target: Date) => void;\r\n    addTodo: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n    categories: ITodoCategory[];\r\n    priorities: ITodoPriority[];\r\n    date: Date;\r\n    generateDefaultPriorities: () => void;\r\n    generateDefaultCategories: () => void;\r\n}\r\n\r\nconst TodosAdd = (props: ITodoAddProps) => {\r\n\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <form className=\"p-2 w-96 sm:w-120 text-black\">\r\n                <div className=\"flex w-full flex-col space-y-4\">\r\n                    <div className=\"flex flex-col space-y-4\">\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">What do you need to do?</label>\r\n                            <input id=\"taskName\"\r\n                                type=\"text\"\r\n                                className=\"p-1\"\r\n                                value={props.values.taskName}\r\n                                onChange={(e) => props.handleChange(e.target)}\r\n                            >\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">When does it have to be done?</label>\r\n                            <DatePicker\r\n                                className=\"w-full\"\r\n                                selected={new Date(props.date)}\r\n                                onChange={(date) => props.handleDateChange(date as Date)}\r\n                                dateFormat=\"dd.MM.yyyy\"\r\n                                minDate={new Date(Date.now())}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-between\">\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <label htmlFor=\"todoCategoryId\" className=\"text-white font-semibold\">Categorize!</label>\r\n                            {\r\n                                props.categories.length > 0\r\n                                    ?\r\n                                    <select id=\"todoCategoryId\"\r\n                                        value={props.values.todoCategoryId}\r\n                                        onChange={(e) => props.handleChange(e.target)}\r\n                                        className=\"p-1\"\r\n                                    >\r\n                                        <option value=\"\"></option>\r\n                                        {\r\n                                            props.categories.map(category => {\r\n                                                return (\r\n                                                    <option\r\n                                                        value={category.id}\r\n                                                        key={category.id}\r\n                                                    >\r\n                                                        {category.categoryName}\r\n                                                    </option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                    :\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"hover:text-pink-100 font-semibold underline text-white\"\r\n                                            to=\"/categories/add\">\r\n                                            Add categories\r\n                                        </Link>\r\n                                        <button\r\n                                            onClick={(e) => { props.generateDefaultCategories(); e.preventDefault() }}\r\n                                            className=\"hover:text-pink-100 font-semibold underline text-white text-left\">\r\n                                            Generate default\r\n                                        </button>\r\n                                    </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <label className=\"text-white font-semibold\">Prioritize!</label>\r\n                            {\r\n                                props.priorities.length > 0\r\n                                    ?\r\n                                    <select id=\"todoPriorityId\"\r\n                                        value={props.values.todoPriorityId}\r\n                                        onChange={(e) => props.handleChange(e.target)}\r\n                                        className=\"p-1\"\r\n                                    >\r\n                                        <option value=\"\"></option>\r\n                                        {\r\n                                            props.priorities.map(priority => {\r\n                                                return (\r\n                                                    <option\r\n                                                        value={priority.id}\r\n                                                        key={priority.id}\r\n                                                    >\r\n                                                        {priority.priorityName}\r\n                                                    </option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                    :\r\n                                    <>\r\n                                        <Link\r\n                                            className=\"hover:text-pink-100 font-semibold underline text-white\"\r\n                                            to=\"/priorities/add\">\r\n                                            Add priorities\r\n                                        </Link>\r\n                                        <button\r\n                                            onClick={(e) => { props.generateDefaultPriorities(); e.preventDefault() }}\r\n                                            className=\"hover:text-pink-100 font-semibold underline text-white text-left\">\r\n                                            Generate default\r\n                                        </button>\r\n                                    </>\r\n\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-green-600 w-full font-bold text-white\"\r\n                            onClick={(e) => { props.addTodo(e.target); e.preventDefault() }}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodosAdd;","import React from \"react\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nexport interface ITodosEditProps {\r\n    values: ITodoTask;\r\n    editTodo: (target: EventTarget) => void;\r\n    handleChange: (target: HTMLInputElement | HTMLSelectElement) => void;\r\n    handleDateChange: (target: Date) => void;\r\n    categories: ITodoCategory[];\r\n    priorities: ITodoPriority[];\r\n    removeTodo: (id: string) => void;\r\n}\r\n\r\nconst TodosEdit = (props: ITodosEditProps) => {\r\n    return (\r\n        <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n            <form className=\"p-2 w-96 sm:w-120 text-black\">\r\n                <div className=\"flex w-full flex-col space-y-4\">\r\n                    <div className=\"flex flex-col space-y-4\">\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">What do you need to do?</label>\r\n                            <input id=\"taskName\"\r\n                                type=\"text\"\r\n                                className=\"p-1\"\r\n                                value={props.values.taskName}\r\n                                onChange={(e) => props.handleChange(e.target)}\r\n                            >\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"flex flex-col\">\r\n                            <label className=\"text-white font-semibold\">When does it have to be done?</label>\r\n                            <DatePicker\r\n                                className=\"w-full\"\r\n                                selected={new Date(props.values.dueDt)}\r\n                                onChange={(date) => props.handleDateChange(date as Date)}\r\n                                dateFormat=\"dd.MM.yyyy\"\r\n                                minDate={new Date(Date.now())}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-between\">\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <label htmlFor=\"todoCategoryId\" className=\"text-white font-semibold\">Categorize!</label>\r\n                            <select id=\"todoCategoryId\"\r\n                                value={props.values.todoCategoryId}\r\n                                onChange={(e) => props.handleChange(e.target)}\r\n                                className=\"p-1\"\r\n                            >\r\n                                <option value=\"\"></option>\r\n                                {\r\n                                    props.categories.map(category => {\r\n                                        return (\r\n                                            <option\r\n                                                value={category.id}\r\n                                                key={category.id}\r\n                                            >\r\n                                                {category.categoryName}\r\n                                            </option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"flex flex-col w-1/3\">\r\n                            <label className=\"text-white font-semibold\">Prioritize!</label>\r\n                            <select id=\"todoPriorityId\"\r\n                                value={props.values.todoPriorityId}\r\n                                onChange={(e) => props.handleChange(e.target)}\r\n                                className=\"p-1\"\r\n                            >\r\n                                <option value=\"\"></option>\r\n                                {\r\n                                    props.priorities.map(priority => {\r\n                                        return (\r\n                                            <option\r\n                                                value={priority.id}\r\n                                                key={priority.id}\r\n                                            >\r\n                                                {priority.priorityName}\r\n                                            </option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-yellow-200 w-full font-bold text-black\"\r\n                            onClick={(e) => { props.editTodo(e.target); e.preventDefault() }}>\r\n                            Edit\r\n                        </button>\r\n                        <button\r\n                            className=\"p-2 bg-red-200 w-full font-bold text-black\"\r\n                            onClick={(e) => { props.removeTodo(props.values.id ?? \"\"); e.preventDefault() }}>\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodosEdit;","import React from \"react\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { ITodoTask } from \"../../dtos/ITodoTask\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodosAdd from \"./TodosAdd\";\r\nimport TodosEdit from \"./TodosEdit\";\r\n\r\nconst initialFormValues: ITodoTask = {\r\n    taskName: \"\",\r\n    taskSort: 0,\r\n    dueDt: new Date(Date.now()),\r\n    isCompleted: false,\r\n    isArchived: false,\r\n    todoCategoryId: \"\",\r\n    todoPriorityId: \"\",\r\n}\r\n\r\nexport const initialSelectedTodo: ITodoTask = {\r\n    id: \"\",\r\n    taskName: \"\",\r\n    taskSort: 0,\r\n    dueDt: new Date(Date.now()),\r\n    isCompleted: false,\r\n    isArchived: false,\r\n    todoCategoryId: \"\",\r\n    todoPriorityId: \"\",\r\n}\r\n\r\nconst TodosIndex = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [todos, setTodos] = useState([] as ITodoTask[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [categories, setCategories] = useState([] as ITodoCategory[]);\r\n    const [priorities, setPriorities] = useState([] as ITodoPriority[]);\r\n    const [dueDate, setDueDate] = useState(new Date(Date.now()));\r\n    const [selectedTodo, setSelectedTodo] = useState(initialSelectedTodo)\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<ITodoTask>('/TodoTasks', appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setTodos(result.data);\r\n\r\n            let categoryResult = await BaseService.getAll<ITodoCategory>('/TodoCategories', appState.jwt ?? \"\");\r\n\r\n            if (categoryResult.ok && categoryResult.data) {\r\n                setCategories(categoryResult.data);\r\n            }\r\n\r\n            let priorityResult = await BaseService.getAll<ITodoPriority>('/TodoPriorities', appState.jwt ?? \"\");\r\n            if (priorityResult.ok && priorityResult.data) {\r\n                setPriorities(priorityResult.data);\r\n            }\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case \"taskName\":\r\n                setFormValues({ ...formValues, taskName: target.value })\r\n                return;\r\n            case \"todoCategoryId\":\r\n                setFormValues({ ...formValues, todoCategoryId: target.value })\r\n                return;\r\n            case \"todoPriorityId\":\r\n                setFormValues({ ...formValues, todoPriorityId: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    const handleDateChange = (target: Date) => {\r\n        setDueDate(target)\r\n\r\n        setFormValues({\r\n            ...formValues,\r\n            dueDt: target\r\n        })\r\n    }\r\n\r\n    const handleEditChange = (target: HTMLInputElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case \"taskName\":\r\n                setSelectedTodo({ ...selectedTodo, taskName: target.value })\r\n                return;\r\n            case \"todoCategoryId\":\r\n                setSelectedTodo({ ...selectedTodo, todoCategoryId: target.value })\r\n                return;\r\n            case \"todoPriorityId\":\r\n                setSelectedTodo({ ...selectedTodo, todoPriorityId: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    const handleEditDateChange = (target: Date) => {\r\n        setSelectedTodo({\r\n            ...selectedTodo,\r\n            dueDt: target\r\n        })\r\n    }\r\n\r\n    const addTodo = async (e: EventTarget) => {\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        });\r\n\r\n        let result = await BaseService.post<ITodoTask>('/TodoTasks', formValues, appState.jwt ?? \"\")\r\n\r\n        console.log(result);\r\n\r\n\r\n        if (result.ok) {\r\n            setFormValues(initialFormValues);\r\n            setDueDate(new Date(Date.now()))\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode,\r\n            })\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages,\r\n            })\r\n        }\r\n    }\r\n\r\n    const editTodo = async (e: EventTarget) => {\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let result = await BaseService.put<ITodoTask>('/TodoTasks', selectedTodo, selectedTodo.id ?? \"\", appState.jwt ?? \"\")\r\n        if (result.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode\r\n            })\r\n            setSelectedTodo(initialSelectedTodo);\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages\r\n            })\r\n        }\r\n    }\r\n\r\n    const setTodoCompletedValue = async (todo: ITodoTask) => {\r\n        todo.isCompleted ? todo.isCompleted = false : todo.isCompleted = true;\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let result = await BaseService.put<ITodoTask>('/TodoTasks', todo, todo.id ?? \"\", appState.jwt ?? \"\")\r\n\r\n        if (result.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Ok, statusCode: result.statusCode\r\n            })\r\n            loadData();\r\n        } else {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const generateDefaultPriorities = async () => {\r\n\r\n        const lowPriority = { priorityName: \"Low\", prioritySort: 0 } as ITodoPriority;\r\n        const normalPriority = { priorityName: \"Normal\", prioritySort: 1 } as ITodoPriority;\r\n        const highPriority = { priorityName: \"High\", prioritySort: 2 } as ITodoPriority;\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let lowResult = await BaseService.post<ITodoPriority>('/TodoPriorities', lowPriority, appState.jwt ?? \"\");\r\n        if (!lowResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: lowResult.statusCode, messages: lowResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let normResult = await BaseService.post<ITodoPriority>('/TodoPriorities', normalPriority, appState.jwt ?? \"\");\r\n        if (!normResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: normResult.statusCode, messages: normResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let highResult = await BaseService.post<ITodoPriority>('/TodoPriorities', highPriority, appState.jwt ?? \"\");\r\n        if (!highResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: highResult.statusCode, messages: highResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Ok, statusCode: highResult.statusCode\r\n        })\r\n\r\n        loadData();\r\n    }\r\n\r\n    const generateDefaultCategories = async () => {\r\n\r\n        const homeCategory = { categoryName: \"Home\", categorySort: 0 } as ITodoCategory;\r\n        const workCategory = { categoryName: \"Work\", categorySort: 1 } as ITodoCategory;\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Loading, statusCode: -1\r\n        })\r\n\r\n        let homeResult = await BaseService.post<ITodoCategory>('/TodoCategories', homeCategory, appState.jwt ?? \"\");\r\n        if (!homeResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: homeResult.statusCode, messages: homeResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        let workResult = await BaseService.post<ITodoCategory>('/TodoCategories', workCategory, appState.jwt ?? \"\");\r\n        if (!workResult.ok) {\r\n            setPageStatus({\r\n                pageStatus: EPageStatus.Error, statusCode: workResult.statusCode, messages: workResult.messages\r\n            })\r\n            return;\r\n        }\r\n\r\n        setPageStatus({\r\n            pageStatus: EPageStatus.Ok, statusCode: workResult.statusCode\r\n        })\r\n\r\n        loadData();\r\n    }\r\n\r\n    const removeTodo = async (id: string) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.delete<ITodoTask>(\"/TodoTasks\", id, appState.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            todos.splice(todos.findIndex(todo => todo.id === id), 1);\r\n            setTodos(todos);\r\n            setSelectedTodo(initialSelectedTodo);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const panelIsVisible = (): boolean => {\r\n        const panel = document.querySelector(\".panel\");\r\n        if (panel?.classList.contains(\"hidden\")) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const setPanelVisible = (visible: boolean) => {\r\n        const panel = document.querySelector(\".panel\") as HTMLDivElement;\r\n        const accordion = document.querySelector(\".accordion\") as HTMLDivElement;\r\n\r\n        if (visible) {\r\n            panel.classList.add(\"hidden\");\r\n            accordion.classList.add(\"h-auto\");\r\n            accordion.innerHTML = \"⬇\";\r\n        } else {\r\n            panel.classList.remove(\"hidden\");\r\n            panel.classList.add(\"flex\");\r\n            accordion.classList.remove(\"h-4\");\r\n            accordion.innerHTML = \"⬆\";\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Loader pageStatus={pageStatus} />\r\n            {appState.jwt !== null\r\n                ?\r\n                <div className=\"flex lg:flex-row flex-col justify-evenly\">\r\n                    <div className=\"lg:hidden accordion cursor-pointer text-right\"\r\n                        onClick={() => panelIsVisible() ? setPanelVisible(true) : setPanelVisible(false)}\r\n                    ><span className=\"italic text-sm\"> Click to add new todos → </span>⬇\r\n                    </div>\r\n                    <div className=\"flex-col lg:space-y-12 panel lg:flex hidden\">\r\n                        {\r\n                            selectedTodo.id !== \"\"\r\n                                ?\r\n                                <TodosEdit\r\n                                    values={selectedTodo}\r\n                                    handleChange={handleEditChange}\r\n                                    handleDateChange={handleEditDateChange}\r\n                                    categories={categories}\r\n                                    priorities={priorities}\r\n                                    editTodo={editTodo}\r\n                                    removeTodo={removeTodo}\r\n                                />\r\n                                :\r\n                                <TodosAdd\r\n                                    values={formValues}\r\n                                    handleChange={handleChange}\r\n                                    addTodo={addTodo}\r\n                                    pageStatus={pageStatus}\r\n                                    categories={categories}\r\n                                    priorities={priorities}\r\n                                    handleDateChange={handleDateChange}\r\n                                    date={dueDate}\r\n                                    generateDefaultPriorities={generateDefaultPriorities}\r\n                                    generateDefaultCategories={generateDefaultCategories}\r\n                                />\r\n                        }\r\n                    </div>\r\n                    <TodoList\r\n                        values={todos}\r\n                        setSelectedTodo={setSelectedTodo}\r\n                        selectedTodo={selectedTodo}\r\n                        setTodoCompletedValue={setTodoCompletedValue}\r\n                    />\r\n                </div>\r\n                :\r\n                <Redirect to=\"/\" />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodosIndex;\r\n","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst HomeIndex = () => {\r\n    const appState = useContext(AppContext);\r\n    return (\r\n        <div className=\"flex flex-col cursor-default\">\r\n            <p className=\"text-9xl font-bold text-pink-200\">Todos.</p>\r\n            {\r\n                appState.jwt === null\r\n                    ?\r\n                    <p className=\"text-2xl font-bold text-pink-200 pl-6\">\r\n                        <Link className=\"hover:text-white\" to=\"/identity/login\">Login</Link> to get started\r\n                    </p>\r\n                    :\r\n                    <p className=\"text-2xl font-bold text-pink-200 pl-6 italic\">\r\n                        You miss 100% of the shots you don't take.\r\n                    </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeIndex;\r\n","import Axios, { AxiosError } from \"axios\";\r\nimport { LoginUrl } from \"../configuration\";\r\nimport { IFetchResponse } from \"../types/IFetchResponse\";\r\nimport { ILoginValues } from '../dtos/ILoginValues';\r\nimport { IRegisterValues } from \"../dtos/IRegisterValues\";\r\n\r\nexport abstract class AccountService {\r\n\r\n    protected static axios = Axios.create({\r\n        baseURL: LoginUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    static login = async<TEntity>(loginData: ILoginValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Login', JSON.stringify(loginData));\r\n\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    static register = async <TEntity>(registerData: IRegisterValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Register', JSON.stringify(registerData));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                data: axError.response?.data,\r\n                messages: axError.response?.data.messages\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { useContext, useState } from \"react\"\r\nimport { Redirect } from \"react-router\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ILoginValues } from \"../../dtos/ILoginValues\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nconst initialFormValues: ILoginValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n};\r\n\r\nexport interface ILoginProps {\r\n    values: ILoginValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    } as IPageStatus);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.login({\r\n            email: formValues.email,\r\n            password: formValues.password\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.firstName, jwtResponse.lastName);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages })\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        if (target.id === \"email\") {\r\n            setFormValues({ ...formValues, email: target.value })\r\n        }\r\n        if (target.id === \"password\") {\r\n            setFormValues({ ...formValues, password: target.value })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/todos\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst FormView = (props: ILoginProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n                <form className=\"p-2 w-96 sm:w-120 text-white space-y-4\">\r\n                    <div className=\"grid grid-col\">\r\n                        <label htmlFor=\"email\" className=\"underline\">Email</label>\r\n                        <input id=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.email}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col\">\r\n                        <label htmlFor=\"password\" className=\"underline\">Password</label>\r\n                        <input id=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.password}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button\r\n                            onClick={(e) => { props.toggleAuthStatus(e.target); e.preventDefault() }}\r\n                            className=\"p-2 bg-green-600 w-full font-bold\">\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IRegisterValues } from \"../../dtos/IRegisterValues\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nconst initialFormValues: IRegisterValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n}\r\n\r\nexport interface IRegisterProps {\r\n    values: IRegisterValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    } as IPageStatus);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.register({\r\n            email: formValues.email,\r\n            password: formValues.password,\r\n            firstName: formValues.firstName,\r\n            lastName: formValues.lastName,\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.firstName, jwtResponse.lastName)\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"email\":\r\n                setFormValues({ ...formValues, email: target.value })\r\n                break;\r\n            case \"password\":\r\n                setFormValues({ ...formValues, password: target.value })\r\n                break;\r\n            case \"firstName\":\r\n                setFormValues({ ...formValues, firstName: target.value })\r\n                break;\r\n            case \"lastName\":\r\n                setFormValues({ ...formValues, lastName: target.value })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/todos\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst FormView = (props: IRegisterProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2 border-t border-b border-1\">\r\n                <form className=\"p-2 w-96 sm:w-120 text-white space-y-4\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"email\" className=\"underline\">Email</label>\r\n                        <input id=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.email}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"password\" className=\"underline\">Password</label>\r\n                        <input id=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.password}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"firstName\" className=\"underline\">First name</label>\r\n                        <input id=\"firstName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.firstName}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"lastName\" className=\"underline\">Last Name</label>\r\n                        <input id=\"lastName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 text-black bg-gray-100\"\r\n                            value={props.values.lastName}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button\r\n                            onClick={(e) => { props.toggleAuthStatus(e.target); e.preventDefault() }}\r\n                            className=\"p-2 bg-yellow-600 w-full font-bold\">\r\n                            Register\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\n\r\nexport interface CategoryAddProps {\r\n    handleChange: (targer: HTMLInputElement) => void;\r\n    values: ITodoCategory;\r\n    addCategory: (target: EventTarget) => void;\r\n}\r\n\r\nconst CategoryAdd = (props: CategoryAddProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"categoryName\">Category Name</label>\r\n                        <input id=\"categoryName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.categoryName}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"categorySort\">Priority</label>\r\n                        <input id=\"categorySort\"\r\n                            type=\"number\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.categorySort}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-green-600 w-full font-bold text-white\"\r\n                            onClick={(e) => { props.addCategory(e.target); e.preventDefault() }}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>);\r\n}\r\n\r\nexport default CategoryAdd;","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { initialSelectedCategory } from \"./CategoriesIndex\";\r\n\r\nexport interface ICategoryCardProps {\r\n    categories: ITodoCategory[];\r\n    removeCategory: (category: ITodoCategory) => void;\r\n    selectCategory: (category: ITodoCategory) => void;\r\n    selectedCategory: ITodoCategory;\r\n}\r\n\r\nconst CategoryCards = (props: ICategoryCardProps) => {\r\n\r\n    const CategoryCard = (category: ITodoCategory) => {\r\n        return (\r\n            <div className=\"flex w-full h-14 dark:border-white border rounded-md\">\r\n                {\r\n                    props.selectedCategory.id === category.id\r\n                        ?\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedCategory.id === category.id ? props.selectCategory(initialSelectedCategory) : props.selectCategory(category)}\r\n                                className=\"flex w-3/5 flex-row space-x-4 p-4 rounded-l-md bg-yellow-100 text-blue-500 dark:text-white dark:bg-gray-600 cursor-pointer\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {category.categoryName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {category.categorySort}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex w-2/5 flex-row \">\r\n                                <button\r\n                                    className=\" w-full h-full p-4 bg-red-500 rounded-r-md text-white\"\r\n                                    onClick={() => props.removeCategory(category)}>\r\n                                    Remove\r\n                            </button>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedCategory.id === category.id ? props.selectCategory(initialSelectedCategory) : props.selectCategory(category)}\r\n                                className=\"flex w-full flex-row space-x-4 p-4 rounded-md bg-white text-blue-500 dark:text-white dark:bg-transparent cursor-pointer hover:bg-yellow-200 dark:hover:bg-gray-400\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {category.categoryName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {category.categorySort}\r\n                                </div>\r\n                                <div>\r\n                                    ↙\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"space-y-2\">\r\n            {\r\n                props.categories\r\n                    .sort((a, b) => a.categorySort > b.categorySort ? -1 : 1)\r\n                    .map(category => {\r\n                        return <CategoryCard {...category} key={category.id} />;\r\n                    })\r\n            }\r\n        </div>)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default CategoryCards;\r\n","import { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\n\r\ninterface ICategoryEditProps {\r\n    handleEditChange: (target: HTMLInputElement) => void;\r\n    values: ITodoCategory;\r\n    editCategory: (target: EventTarget) => void;\r\n}\r\n\r\nconst CategoryEdit = (props: ICategoryEditProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"categoryName\">Category Name</label>\r\n                        <input id=\"categoryName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.categoryName}\r\n                            onChange={(e) => props.handleEditChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"categorySort\">Priority</label>\r\n                        <input id=\"categorySort\"\r\n                            type=\"number\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.categorySort}\r\n                            onChange={(e) => props.handleEditChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-yellow-200 w-full font-bold text-black\"\r\n                            onClick={(e) => { props.editCategory(e.target); e.preventDefault() }}>\r\n                            Edit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CategoryEdit;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoCategory } from \"../../dtos/ITodoCategory\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport CategoryAdd from \"./CategoryAdd\";\r\nimport CategoryCards from \"./CategoryCards\";\r\nimport CategoryEdit from \"./CategoryEdit\";\r\n\r\n\r\nconst initialFormValues: ITodoCategory = {\r\n    categoryName: \"\",\r\n    categorySort: 0,\r\n}\r\n\r\nexport const initialSelectedCategory: ITodoCategory = {\r\n    categoryName: \"\",\r\n    categorySort: 0\r\n}\r\n\r\nconst CategoriesIndex = () => {\r\n    const [categories, setCategories] = useState([] as ITodoCategory[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [formValues, setFormValues] = useState(initialFormValues)\r\n    const [selectedCategory, setSelectedCategory] = useState(initialSelectedCategory);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    console.log(selectedCategory);\r\n\r\n    const loadData = async () => {\r\n        const result = await BaseService.getAll<ITodoCategory>(\"/TodoCategories\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setCategories(result.data);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const addCategory = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.post<ITodoCategory>(\"/TodoCategories\", formValues, appState.jwt ?? \"\");\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const removeCategory = async (category: ITodoCategory) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.delete<ITodoCategory>(\"/TodoCategories\", category.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedCategory(initialSelectedCategory);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const editCategory = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.put<ITodoCategory>(\"/TodoCategories\", selectedCategory, selectedCategory.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedCategory(initialSelectedCategory);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"categoryName\":\r\n                setFormValues({ ...formValues, categoryName: target.value })\r\n                return;\r\n            case \"categorySort\":\r\n                setFormValues({ ...formValues, categorySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleEditChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"categoryName\":\r\n                setSelectedCategory({ ...selectedCategory, categoryName: target.value })\r\n                return;\r\n            case \"categorySort\":\r\n                setSelectedCategory({ ...selectedCategory, categorySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.jwt !== null\r\n                    ?\r\n                    <>\r\n                        <Loader pageStatus={pageStatus} />\r\n                        <div className=\"flex flex-col border-b border-t border-white p-4 space-y-4\">\r\n                            {\r\n                                selectedCategory.id\r\n                                    ?\r\n                                    <CategoryEdit\r\n                                        handleEditChange={handleEditChange}\r\n                                        values={selectedCategory}\r\n                                        editCategory={editCategory}\r\n                                    />\r\n                                    :\r\n                                    <CategoryAdd\r\n                                        handleChange={handleChange}\r\n                                        values={formValues}\r\n                                        addCategory={addCategory}\r\n                                    />\r\n                            }\r\n                            <CategoryCards\r\n                                removeCategory={removeCategory}\r\n                                categories={categories}\r\n                                selectCategory={setSelectedCategory}\r\n                                selectedCategory={selectedCategory}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CategoriesIndex;","import { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\n\r\nexport interface PriorityAddProps {\r\n    handleChange: (targer: HTMLInputElement) => void;\r\n    values: ITodoPriority;\r\n    addPriority: (target: EventTarget) => void;\r\n}\r\n\r\nconst PriorityAdd = (props: PriorityAddProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"priorityName\">Priority Name</label>\r\n                        <input id=\"priorityName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.priorityName}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"prioritySort\">Priority level</label>\r\n                        <input id=\"prioritySort\"\r\n                            type=\"number\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.prioritySort}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-green-600 w-full font-bold text-white\"\r\n                            onClick={(e) => { props.addPriority(e.target); e.preventDefault() }}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>);\r\n}\r\n\r\nexport default PriorityAdd;","import { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { initialSelectedPriority } from \"./PrioritiesIndex\";\r\n\r\nexport interface IPriorityCardProps {\r\n    priorities: ITodoPriority[];\r\n    removePriority: (priority: ITodoPriority) => void;\r\n    selectPriority: (priority: ITodoPriority) => void;\r\n    selectedPriority: ITodoPriority;\r\n}\r\n\r\nconst PriorityCards = (props: IPriorityCardProps) => {\r\n\r\n    const PriorityCard = (priority: ITodoPriority) => {\r\n        return (\r\n            <div className=\"flex w-full h-14 dark:border-white border rounded-md\">\r\n                {\r\n                    props.selectedPriority.id === priority.id\r\n                        ?\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedPriority.id === priority.id ? props.selectPriority(initialSelectedPriority) : props.selectPriority(priority)}\r\n                                className=\"flex w-4/5 flex-row space-x-4 p-4 rounded-l-md bg-yellow-100 text-blue-500 dark:text-white dark:bg-transparent cursor-pointer\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {priority.priorityName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority Level: </label>\r\n                                    {priority.prioritySort}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex w-1/5 flex-row \">\r\n                                <button\r\n                                    className=\" w-full h-full p-4 bg-red-500 rounded-r-md text-white\"\r\n                                    onClick={() => props.removePriority(priority)}>\r\n                                    Remove\r\n                            </button>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                onClick={() => props.selectedPriority.id === priority.id ? props.selectPriority(initialSelectedPriority) : props.selectPriority(priority)}\r\n                                className=\"flex w-full flex-row space-x-4 p-4 rounded-md bg-white text-blue-500 dark:text-white dark:bg-transparent cursor-pointer hover:bg-yellow-200 dark:hover:bg-gray-400\">\r\n                                <div className=\"font-semibold w-1/2\">\r\n                                    {priority.priorityName}\r\n                                </div>\r\n                                <div className=\"w-1/2\">\r\n                                    <label>Priority: </label>\r\n                                    {priority.prioritySort}\r\n                                </div>\r\n                                <div>\r\n                                    ↙\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"space-y-2\">\r\n            {\r\n                props.priorities\r\n                    .sort((a, b) => a.prioritySort > b.prioritySort ? -1 : 1)\r\n                    .map(priority => {\r\n                        return <PriorityCard {...priority} key={priority.id} />;\r\n                    })\r\n            }\r\n        </div>)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default PriorityCards;\r\n","import { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\n\r\ninterface IPriorityEditProps {\r\n    handleEditChange: (target: HTMLInputElement) => void;\r\n    values: ITodoPriority;\r\n    editPriority: (target: EventTarget) => void;\r\n}\r\n\r\nconst PriorityEdit = (props: IPriorityEditProps) => {\r\n    return (\r\n        <>\r\n            <form>\r\n                <div className=\"flex flex-col space-y-4 p-4 border-2 border-white rounded-md  text-white dark:bg-transparent\">\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"priorityName\">Priority Name</label>\r\n                        <input id=\"priorityName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.priorityName}\r\n                            onChange={(e) => props.handleEditChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-col font-semibold\">\r\n                        <label htmlFor=\"prioritySort\">Priority level</label>\r\n                        <input id=\"prioritySort\"\r\n                            type=\"number\"\r\n                            className=\"p-1 bg-white text-black\"\r\n                            value={props.values.prioritySort}\r\n                            onChange={(e) => props.handleEditChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex flex-row justify-center\">\r\n                        <button\r\n                            className=\"p-2 bg-yellow-200 w-full font-bold text-black\"\r\n                            onClick={(e) => { props.editPriority(e.target); e.preventDefault() }}>\r\n                            Edit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PriorityEdit;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ITodoPriority } from \"../../dtos/ITodoPriority\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport PriorityAdd from \"./PriorityAdd\";\r\nimport PriorityCards from \"./PriorityCards\";\r\nimport PriorityEdit from \"./PriorityEdit\";\r\n\r\n\r\nconst initialFormValues: ITodoPriority = {\r\n    priorityName: \"\",\r\n    prioritySort: 0\r\n}\r\n\r\nexport const initialSelectedPriority: ITodoPriority = {\r\n    priorityName: \"\",\r\n    prioritySort: 0\r\n}\r\n\r\nconst PrioritiesIndex = () => {\r\n    const [priorities, setPriorities] = useState([] as ITodoPriority[]);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [formValues, setFormValues] = useState(initialFormValues)\r\n    const [selectedPriority, setSelectedPriority] = useState(initialSelectedPriority);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    console.log(selectedPriority);\r\n\r\n    const loadData = async () => {\r\n        const result = await BaseService.getAll<ITodoPriority>(\"/TodoPriorities\", appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setPriorities(result.data);\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const addPriority = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        const result = await BaseService.post<ITodoPriority>(\"/TodoPriorities\", formValues, appState.jwt ?? \"\");\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const removePriority = async (category: ITodoPriority) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.delete<ITodoPriority>(\"/TodoPriorities\", category.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedPriority(initialSelectedPriority);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n    }\r\n\r\n    const editPriority = async () => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n        const result = await BaseService.put<ITodoPriority>(\"/TodoPriorities\", selectedPriority, selectedPriority.id ?? \"\", appState.jwt ?? \"\");\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n            loadData();\r\n            setFormValues(initialFormValues);\r\n            setSelectedPriority(initialSelectedPriority);\r\n        }\r\n        else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode, messages: result.messages });\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"priorityName\":\r\n                setFormValues({ ...formValues, priorityName: target.value })\r\n                return;\r\n            case \"prioritySort\":\r\n                setFormValues({ ...formValues, prioritySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleEditChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"priorityName\":\r\n                setSelectedPriority({ ...selectedPriority, priorityName: target.value })\r\n                return;\r\n            case \"prioritySort\":\r\n                setSelectedPriority({ ...selectedPriority, prioritySort: Number.parseInt(target.value) })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.jwt !== null\r\n                    ?\r\n                    <>\r\n                        <Loader pageStatus={pageStatus} />\r\n                        <div className=\"flex flex-col border-b border-t border-white p-4 space-y-4\">\r\n                            {\r\n                                selectedPriority.id\r\n                                    ?\r\n                                    <PriorityEdit\r\n                                        handleEditChange={handleEditChange}\r\n                                        values={selectedPriority}\r\n                                        editPriority={editPriority}\r\n                                    />\r\n                                    :\r\n                                    <PriorityAdd\r\n                                        handleChange={handleChange}\r\n                                        values={formValues}\r\n                                        addPriority={addPriority}\r\n                                    />\r\n                            }\r\n                            <PriorityCards\r\n                                removePriority={removePriority}\r\n                                priorities={priorities}\r\n                                selectPriority={setSelectedPriority}\r\n                                selectedPriority={selectedPriority}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    :\r\n                    <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default PrioritiesIndex;","import React, { useState } from 'react';\r\nimport { AppContextProvider, initialAppState } from './context/AppContext';\r\nimport Header from './components/Header';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Page404 from './containers/Page404';\r\nimport TodosIndex from './containers/todos/TodosIndex';\r\nimport HomeIndex from './containers/home/HomeIndex';\r\nimport LoginForm from './containers/identity/LoginForm';\r\nimport RegisterForm from './containers/identity/RegisterForm';\r\nimport CategoriesIndex from './containers/categories/CategoriesIndex';\r\nimport PrioritiesIndex from './containers/priorities/PrioritiesIndex';\r\n\r\nfunction App() {\r\n    const setAuthInfo = (jwt: string | null, firstName: string, lastName: string): void => {\r\n        setAppState({ ...appState, jwt, firstName, lastName });\r\n    }\r\n\r\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo })\r\n\r\n    return (\r\n        <AppContextProvider value={appState}>\r\n            <div className=\"dark:bg-gray-800 bg-blue-700 min-h-screen\">\r\n                <Header />\r\n                <main className=\"p-4\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={HomeIndex} />\r\n\r\n                        <Route exact path=\"/identity/login\" component={LoginForm} />\r\n                        <Route exact path=\"/identity/register\" component={RegisterForm} />\r\n\r\n                        <Route exact path=\"/todos\" component={TodosIndex} />\r\n\r\n                        <Route exact path=\"/categories\" component={CategoriesIndex} />\r\n\r\n                        <Route exact path=\"/priorities\" component={PrioritiesIndex} />\r\n\r\n                        <Route component={Page404} />\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n        </AppContextProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport 'jquery';\r\nimport 'popper.js';\r\n\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './assets/site.css';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport \"react-datepicker/dist/react-datepicker.min.css\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}